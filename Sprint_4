<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Sheep! Heard Dan</title>
</head>
<body>
<div id="container" style="width:1500px; height:500px; position:relative;" >
<canvas id="ctx" width="1584" height="884" style="z-index:2"></canvas>

</div>
<audio id="music" src="https://raw.githubusercontent.com/brildon/dreamland_dan/master/music.wav" preload="auto" loop></audio>
<script>
var cv = document.getElementById("ctx");
var ctx = cv.getContext('2d');

var music = 'https://raw.githubusercontent.com/brildon/dreamland_dan/master/music.wav';

document.getElementById('music').play();

var sheepPoints = 0;	
var levelAt = 0;

var levelWords = new Array(9);

levelWords[0] = "CONE";
levelWords[1] = "BOO";
levelWords[2] = "HOP";

levelWords[3] = "LEAP";
levelWords[4] = "SLEEP";
levelWords[5] = "EAT";

levelWords[6] = "STUNT";
levelWords[7] = "JUMP";
levelWords[8] = "JACK";

var correctWords = new Array(3);

correctWords[0] = levelWords[2];
correctWords[1] = levelWords[3];
correctWords[2] = levelWords[7];

var menuCheck = true;
var buildCheck = false;
var creditsScreen = false;
var optionsScreen = false;
var collide = false;
var falling = false;
var isDucked = false;
var isStanding = true;
var sheepSaved = 0;
var sheepTotal = 0;
var collision = false;
var movingRight = true;
var regExpScreen = true;
var soundOn = true;
var cutScene = false;
var lastLevel = false;
var gameOver = false;
var jumpable = false;
var crouchable = true;
var attackable = true;
var counter = 1;

var regExpOne = "";
var regExpTwo = "";
var regExpThree = "";

var mouse = {x:0,y:0};

var collisionIndex = -1;
var signIndex = -1;
var count = 0;
var countR = 0;
var countA = 0;
var playerDirec = 0;
var currentLvl = 1;
var lvlFlag = false;

var key = [];

var distantBackground = {
sourceY: 1009,
sourceX: 0,
sourceWidth: 6336,
sourceHeight: 424,
width: 6336,
height: 428,
x: 0,
y: 0
}

var foregroundBackground = {
sourceY: 885,
sourceX: 0,
sourceWidth: 6336,
sourceHeight: 42,
width: 6336,
height: 53,
x: 0,
y: 680
}

var foreground2Background = {
sourceY: 938,
sourceX: 0,
sourceWidth: 6336,
sourceHeight: 37,
width: 6336,
height: 53,
x: 0,
y: 695
}

var gameWorld = {
x: 0,
y: 0,
width: 6336,
heigth: 884	
}

var camera = {
x: 0,
y: 0,
width: cv.width,
height: cv.height,
vx: 0,
previousX: 0,

rightInnerBoundary: function (){
    return this.x + (this.width * 0.75);	
},	
leftInnerBoundary: function (){
    return this.x+ (this.width * 0.25);	
},
topInnerBoundary: function (){
    return this.y + (this.height * 0.25);	
},
bottomInnerBoundary: function (){
    return this.y + (this.height * 0.75);	
}
}

var signObj = {
posX: 0,
posY: 0,
height: 113,
width: 102,
active: false,
read: false,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}	
}

var collisionObj = {
x: 0,
y: 0,
height: 10,
width: 75,

centerX: function (){
    return this.x + (this.width / 2);
},
centerY: function (){
    return this.y + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}	
}

var miniGameObj = {
x: 0,
y: 0,
height: 100,
width: 100,

centerX: function (){
    return this.x + (this.width / 2);
},
centerY: function (){
    return this.y + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}
}

var miniGame = Object.create(miniGameObj);

var playerObj = {
posY: 600,
posX: 200,
height: 137,
width: 140,
hMask: 10,
wMask: 75,
jumpStrength: 18,
jumpDecay: 0.5,
fallStrengh: 0,
speed: 5,
state: 0,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},

halfHeight: function(){
    return (this.height / 2);	
}
}

var branchObj = {
posX: 0,
posY: 0,
height: 5,
width : 100,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}		
}

var aBranch = new Array (6);
for (var i=0;i<aBranch.length;i++){
aBranch[i] = Object.create(branchObj);	
}

aBranch[0].posX = 150;
aBranch[0].posY = 580;

aBranch[1].posX = 300;
aBranch[1].posY = 400;

aBranch[2].posX = 2450;
aBranch[2].posY = 580;

aBranch[3].posX = 0;
aBranch[3].posY = 737;
aBranch[3].width = gameWorld.width;

aBranch[4].posX = 150;
aBranch[4].posY = 220;

aBranch[5].posX = 500;
aBranch[5].posY = 450;

var breakObj = {
posX: 0,
posY: 0,
height: 100,
width: 100,
broken: false,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}	
}
var largeObj = {
posX: 0,
posY: 0,
height: 93,
width: 220,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}	
}
var smallObj = {
posX: 0,
posY: 0,
height: 79,
width: 113,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}	
}

var sheepObj = {
posX: 0,
posY: 0,
height: 69,
width : 124,
saved: false,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);	
}		
}

var cougarObj =
{
posX: 0,
posY: 0,
height: 70,
width : 151,
saved: false
}

var playerObj = Object.create(playerObj);

var hitBox = {
posX: playerObj.posX+playerObj.width,
posY: playerObj.posY,
height: playerObj.height,
width : 5,

centerX: function (){
    return this.posX + (this.width / 2);
},
centerY: function (){
    return this.posY + (this.height / 2);	
},
halfWidth: function(){
    return (this.width / 2);	
},
halfHeight: function(){
    return (this.height / 2);
}
}

var attackBox = Object.create(hitBox);

var cougar = Object.create(cougarObj);

var signs = new Array(9);
for(var i =0; i<signs.length; i++)
{
signs[i] = Object.create(signObj);
}

var breakables = new Array (2);

for (var i =0; i<breakables.length; i++)
{
breakables[i]=Object.create(breakObj);
}

var sm_obj = new Array (3);
for (var i =0; i<sm_obj.length; i++)
{
sm_obj[i]=Object.create(smallObj);
}

var lg_obj = new Array (2);
for (var i =0; i<lg_obj.length; i++)
{
lg_obj[i]=Object.create(largeObj);
}


var sheep = new Array (6);
for (var i=0; i<sheep.length; i++)
{
sheep[i]=Object.create(sheepObj);
}


var hitVar = false;
var floorLvl = 737;

camera.x = (gameWorld.x + gameWorld.width/2) - camera.width/2;
camera.y = (gameWorld.y + gameWorld.height/2) - camera.height/2;

var isAttack = false;
var isDucking = false;
var isMoveLeft = false;
var isMoveRight = false;
var isJump = false;

var textOpen = false;

var textBox = {
xCoord: 0,
yCoord: 0,
canWrite: false,
typerX: 0
}

var textBoxArray = new Array(3);

for(i = 1; i <= textBoxArray.length; i++)
{
textBoxArray[i - 1] = Object.create(textBox);
}
textBoxArray[0].xCoord = 100;
textBoxArray[1].xCoord = 600;

textBoxArray[2].xCoord = 1000;

textBoxArray[0].yCoord = 650;
textBoxArray[1].yCoord = 650;
textBoxArray[2].yCoord = 650;

var submitButton = {
posX: 0,
posY: 0,
clicked: false
}

var currentTextBox = null;

var submitButtonArray = new Array(3);

for(j = 0; j < submitButtonArray.length; j++)
{
submitButtonArray[j] = Object.create(submitButton);
console.log(submitButtonArray[j]);
}

submitButtonArray[0].posX = 210;
submitButtonArray[1].posX = 670;
submitButtonArray[2].posX = 1130;

submitButtonArray[0].posY = 795;
submitButtonArray[1].posY = 795;
submitButtonArray[2].posY = 795;

var regExp1 = new RegExp(" ");
var regExp2 = new RegExp(" ");
var regExp3 = new RegExp(" ");

var CharacterBox ={
posX: 0,
posY: 0
}

var characterBoxArray = new Array(5);

for(i = 0; i < characterBoxArray.length; i++)
{
characterBoxArray[i] = Object.create(CharacterBox);
}

characterBoxArray[0].posX = 710;
characterBoxArray[4].posX = 835;
characterBoxArray[2].posX = 960;
characterBoxArray[1].posX = 1075;
characterBoxArray[3].posX = 1200;


characterBoxArray[0].posY = 45;
characterBoxArray[1].posY = 45;
characterBoxArray[2].posY = 45;
characterBoxArray[3].posY = 45;
characterBoxArray[4].posY = 45;

// event listeners for key's and click's
window.addEventListener("keydown", keyDown, false);
window.addEventListener("keyup", keyUp, false);

//loadHandler();
var image = new Image();	
image.addEventListener("load", loadHandler, false);
image.src = "https://cloud.githubusercontent.com/assets/8835208/4764399/6fdf279c-5b24-11e4-8a22-14603b0af298.png";

var credits = new Image();
credits.addEventListener("loard", loadHandler, false);
credits.src = "https://cloud.githubusercontent.com/assets/8864180/4948999/ec74fcfe-6610-11e4-8b38-ed50a396dea8.png";

var lvl1_background = new Image();	
lvl1_background.src = "https://cloud.githubusercontent.com/assets/8835208/4923079/a12690e0-6517-11e4-9492-2fe66469f118.png";

var regExp = new Image();
regExp.addEventListener("load", loadHandler, false);
regExp.src = "https://cloud.githubusercontent.com/assets/8835240/4980483/7803107a-6900-11e4-8122-75563d0efbb5.png";

var llama_left = new Image();	
var llama_right = new Image();
var llama_duck_left = new Image();
var llama_duck_right = new Image();
var llama_attack_right = new Image();
var llama_attack_left = new Image();
var llama_jump_sprite = new Image();
var llama_run_sprite = new Image();
var llama_duck_sprite = new Image();
var sheep_right = new Image();
var sheep_left = new Image();
var cougar_left = new Image();
var cougar_right = new Image();
var box = new Image();
var sheepIcon = new Image();
var sheepWizard = new Image();
var optionSoundOn = new Image();
var endScene = new Image();
var optionSoundOff = new Image();
var cutscene = new Image();
var restart = new Image();
var smallPlatform = new Image();
var largePlatform = new Image();
var sign = new Image();
var smBubble = new Image();
var medBubble = new Image();
var lgBubble = new Image();
var moveInstr =  new Image();
var jumpInstr =  new Image();
var crouchInstr =  new Image();
var atkInstr =  new Image();
var restartInstr =  new Image();
var endLvlInstr =  new Image();
var sheepInstr =  new Image();
var regInstr1 =  new Image();
var regInstr2 =  new Image();
var regInstr3 =  new Image();
var regInstr4 =  new Image();
var finishInstr = new Image();
var submitImg = new Image();
var regScreen = new Image();

var expInstr1 = new Image();
var expInstr2 = new Image();
var expInstr3 = new Image();
var expInstr4 = new Image();
var expInstr5 = new Image();
var expInstr6 = new Image();
var expInstr7 = new Image();
var expInstr8 = new Image();
var expInstr9 = new Image();
var expInstr10 = new Image();
var expInstr11 = new Image();
var expInstr12 = new Image();
var expInstr13 = new Image();
var expInstr14 = new Image();
var expInstr15 = new Image();
var expInstr16 = new Image();
var expInstr17 = new Image();
var expInstr18 = new Image();
var expInstr19 = new Image();
var expInstr20 = new Image();
var expInstr21 = new Image();
var expInstr22 = new Image();
var expInstr23 = new Image();
var expInstr24 = new Image();


expInstr1.src = "https://cloud.githubusercontent.com/assets/8864180/5101605/742ddd7c-6f81-11e4-82d5-9c8477a9b733.png";
expInstr2.src = "https://cloud.githubusercontent.com/assets/8864180/5101456/9bd0065a-6f7e-11e4-89e4-d033424b55dc.png";
expInstr3.src = "https://cloud.githubusercontent.com/assets/8864180/5101457/9bd451a6-6f7e-11e4-9d13-e4e961406c25.png";
expInstr4.src = "https://cloud.githubusercontent.com/assets/8864180/5101461/9bd9bf56-6f7e-11e4-8039-22fab23df9ac.png";
expInstr5.src = "https://cloud.githubusercontent.com/assets/8864180/5101458/9bd56d20-6f7e-11e4-8a87-cc6feb5b30f0.png";
expInstr6.src = "https://cloud.githubusercontent.com/assets/8864180/5101462/9bdb0bfe-6f7e-11e4-995f-a9b664adfbec.png";
expInstr7.src = "https://cloud.githubusercontent.com/assets/8864180/5101459/9bd6484e-6f7e-11e4-8949-019fdfb90c32.png";
expInstr8.src = "https://cloud.githubusercontent.com/assets/8864180/5101460/9bd8e9f0-6f7e-11e4-9e72-6089facd55ec.png";
expInstr9.src = "https://cloud.githubusercontent.com/assets/8864180/5101464/9be182b8-6f7e-11e4-891b-bc3631c98477.png";
expInstr10.src = "https://cloud.githubusercontent.com/assets/8864180/5101463/9bdfbd34-6f7e-11e4-9a38-28a011547f91.png";
expInstr11.src = "https://cloud.githubusercontent.com/assets/8864180/5101838/5196e1be-6f86-11e4-8c0c-2254e24e2bbe.png";
expInstr12.src = "https://cloud.githubusercontent.com/assets/8864180/5101841/51991650-6f86-11e4-9bf4-9673b8b150fd.png";
expInstr13.src = "https://cloud.githubusercontent.com/assets/8864180/5101839/519840fe-6f86-11e4-854f-ccd6ea9a8ac3.png";
expInstr14.src = "https://cloud.githubusercontent.com/assets/8864180/5101837/519535bc-6f86-11e4-939d-b492fc1a4f95.png";
expInstr15.src = "https://cloud.githubusercontent.com/assets/8864180/5101836/51952f22-6f86-11e4-8490-e68ac3be2759.png";
expInstr16.src = "https://cloud.githubusercontent.com/assets/8864180/5101840/519c3a7e-6f86-11e4-89f7-45ac9070d783.png";
expInstr17.src = "https://cloud.githubusercontent.com/assets/8864180/5101843/51a35610-6f86-11e4-8b45-8635b1f6da8e.png";
expInstr18.src = "https://cloud.githubusercontent.com/assets/8864180/5101842/51a3023c-6f86-11e4-89e1-ab66d41c6c0b.png";
expInstr19.src = "https://cloud.githubusercontent.com/assets/8864180/5101844/51a3823e-6f86-11e4-81ba-874b8e13f53e.png";
expInstr20.src = "https://cloud.githubusercontent.com/assets/8864180/5101845/51a513a6-6f86-11e4-8bf3-2a32571111c1.png";
expInstr21.src = "https://cloud.githubusercontent.com/assets/8864180/5101846/51a9c748-6f86-11e4-9cf4-3f43cb630ac9.png";
expInstr22.src = "https://cloud.githubusercontent.com/assets/8864180/5101847/51aaabea-6f86-11e4-8c8f-7fae059fbb5f.png";
expInstr23.src = "https://cloud.githubusercontent.com/assets/8864180/5101848/51afb4b4-6f86-11e4-849a-9a1b1a92db66.png";
expInstr24.src = "https://cloud.githubusercontent.com/assets/8864180/5101849/51b1185e-6f86-11e4-8784-3b5122a4e83a.png";


regScreen.src = "https://cloud.githubusercontent.com/assets/8864180/5100959/980625da-6f75-11e4-818d-30b00f9e71bd.png";
submitImg.src = "https://cloud.githubusercontent.com/assets/8864180/5049830/63f6826a-6bee-11e4-9d19-9048b8815500.png";
endScene.src = "https://cloud.githubusercontent.com/assets/8864180/4950698/acadc788-665e-11e4-86e0-f0785f8c70ad.png";
llama_duck_left.src = "https://cloud.githubusercontent.com/assets/8835208/5016392/8546051e-6a6b-11e4-91bf-6ba99b15650b.png";
llama_duck_right.src = "https://cloud.githubusercontent.com/assets/8835208/5016391/854281a0-6a6b-11e4-9513-e08d42f7a49f.png";
llama_left.src = "https://cloud.githubusercontent.com/assets/8864180/4795555/605328ba-5dfd-11e4-84cc-ae20cb6a6bc7.png";
llama_right.src = "https://cloud.githubusercontent.com/assets/8864180/4829890/ce132354-5f89-11e4-9974-202eac5b9acf.png";
llama_attack_right.src = "https://cloud.githubusercontent.com/assets/8835208/5062958/a7abe51c-6d98-11e4-99cc-74d2b7923bf7.png";
llama_attack_left.src = "https://cloud.githubusercontent.com/assets/8835208/5062957/a7aba7c8-6d98-11e4-81fb-78030bf9cdeb.png";
llama_jump_sprite.src = "https://cloud.githubusercontent.com/assets/8835208/4864808/544aa76c-611f-11e4-886c-1bb7ab06455e.png";
llama_run_sprite.src = "https://cloud.githubusercontent.com/assets/8835208/4887001/2b7ee352-6381-11e4-9fec-bebe95a67152.png";
llama_duck_sprite.src = "https://cloud.githubusercontent.com/assets/8835208/5016102/f7bd8e58-6a68-11e4-9d5b-112f358dafc6.png";
sheep_right.src = "https://cloud.githubusercontent.com/assets/8864180/4830603/f2ee51ee-5f8e-11e4-8988-4a3363eedb69.png	";
sheep_left.src = "https://cloud.githubusercontent.com/assets/8864180/4830605/f2de05e6-5f8e-11e4-81e8-cf0a3439ef18.png";
cougar_left.src = "https://cloud.githubusercontent.com/assets/8864180/4948652/dcffffb0-6608-11e4-806f-e4b32ceb2769.png";
cougar_right.src = "https://cloud.githubusercontent.com/assets/8864180/4948654/dd01743a-6608-11e4-979c-4dac571f3560.png";
box.src = "https://cloud.githubusercontent.com/assets/8864180/4948655/dd023a32-6608-11e4-95a6-35e7511b0679.png";
sheepIcon.src = "https://cloud.githubusercontent.com/assets/8864180/4947733/9eed3f92-65f6-11e4-8f5c-49c5afecbe15.png";
sheepWizard.src = "https://cloud.githubusercontent.com/assets/8835208/5016355/1ffe5eae-6a6b-11e4-896b-ad9c89e2688e.png";
optionSoundOn.src = "https://cloud.githubusercontent.com/assets/8864180/4950025/2bb39eaa-6654-11e4-8a5f-b257b6b1004b.png";
optionSoundOff.src = "https://cloud.githubusercontent.com/assets/8864180/4950024/2ba8ccbe-6654-11e4-970b-2b07b3f59527.png";
cutscene.src = "https://cloud.githubusercontent.com/assets/8864180/4950462/38b342a2-665b-11e4-9e81-03a12903a1a4.png";
restart.src = "https://cloud.githubusercontent.com/assets/8864180/4951552/c68d9b60-6668-11e4-806f-eb3eebb55a91.png";
smallPlatform.src = "https://cloud.githubusercontent.com/assets/8864180/4951669/2d30d3f4-666a-11e4-947c-19d5196a0dc8.png";
largePlatform.src = "https://cloud.githubusercontent.com/assets/8864180/4951668/2d3073fa-666a-11e4-86a1-5ce1fe80e8fe.png";
sign.src = "https://cloud.githubusercontent.com/assets/8864180/5041650/9957a1ee-6b8c-11e4-941e-b37410114261.png	";
smBubble.src = "https://cloud.githubusercontent.com/assets/8864180/5041651/995b5e74-6b8c-11e4-82b2-04469c5f78a3.png";
medBubble.src = "https://cloud.githubusercontent.com/assets/8864180/5041648/9951b5f4-6b8c-11e4-80c0-edfef849f7e6.png";
lgBubble.src = "https://cloud.githubusercontent.com/assets/8864180/5041649/9956489e-6b8c-11e4-9888-9308c77c6744.png";
moveInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048074/9b779624-6be0-11e4-8d71-dc58e708ed0c.png";
jumpInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048073/9b747eda-6be0-11e4-90c4-a691835d6cbb.png";
crouchInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048076/9b795180-6be0-11e4-9ded-4b3400e4e3ca.png";
atkInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048071/9b73d4f8-6be0-11e4-8057-e4904aa96f88.png";
restartInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048079/9b82fadc-6be0-11e4-9383-9d98a9213099.png";
endLvlInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048075/9b78e876-6be0-11e4-88fb-6a12e251ff11.png";
finishInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048072/9b747c82-6be0-11e4-8c11-8649b6854b0c.png";
sheepInstr.src = "https://cloud.githubusercontent.com/assets/8864180/5048082/9b873502-6be0-11e4-850b-2386d28b8c57.png";
regInstr1.src = "https://cloud.githubusercontent.com/assets/8864180/5048077/9b7ea324-6be0-11e4-838b-697931b347ee.png";
regInstr2.src = "https://cloud.githubusercontent.com/assets/8864180/5048080/9b84d280-6be0-11e4-872f-525fb0c44fa9.png";
regInstr3.src = "https://cloud.githubusercontent.com/assets/8864180/5048078/9b816e60-6be0-11e4-916f-3087311590dc.png";
regInstr4.src = "https://cloud.githubusercontent.com/assets/8864180/5048081/9b86a15a-6be0-11e4-8457-705190846e47.png";

function menu(e)
{
var tempStartH;
var tempStartW;

if(e.layerX || e.layerY == 0){
    mouse.x = e.pageX - cv.offsetLeft;
    mouse.y = e.pageY - cv.offsetTop;	
}

if(mouse.x < 1102 && mouse.y < 512 && mouse.x > 813 && mouse.y > 402 && menuCheck==true && creditsScreen ==false && optionsScreen==false)
{
    buildCheck=false;
    menuCheck=false;
    loadHandler();
}
if(870<mouse.x && mouse.x<1260 && 670<mouse.y && mouse.y<820 && optionsScreen == false)
{
    creditsScreen = true;
    buildCheck=false;
    loadHandler();	
}
if(55<mouse.x && mouse.x<350 && 50<mouse.y && mouse.y<190 && creditsScreen == true)
{
    creditsScreen = false;
    loadHandler();
}
if(55<mouse.x && mouse.x<350 && 50<mouse.y && mouse.y<190 && optionsScreen == true)
{
    optionsScreen = false;
    loadHandler();
}
if(buildCheck==false && regExpScreen ==false && mouse.x <= 1000 && mouse.x >= 500)
{
    loadHandler();
}
if(490<mouse.x && mouse.x<880 && mouse.y>540 && 670 > mouse.y && creditsScreen == false)
{
    optionsScreen = true;
    buildCheck=false;
    loadHandler();
}
if(optionsScreen && mouse.x>795 && mouse.x<925 && mouse.y >385 && mouse.y<484)
{
    soundOn = false;
    loadHandler();
}
if(optionsScreen && mouse.x>575 && mouse.x<705 && mouse.y >385 && mouse.y<484)
{
    soundOn = true;
    loadHandler();
}

}

function loadHandler()
{   
ctx.restore();

//console.log(menuCheck);
if(menuCheck == true)
{
    //console.log("yay");
    if (creditsScreen==true)
    {
        ctx.drawImage(credits,0,0,1600,900);
    }
    else if(optionsScreen==true)
    {
        if(soundOn)
        {
            ctx.drawImage(optionSoundOn,0,0,1600,900);
            document.getElementById('music').play();
        }

        else
        {
            ctx.drawImage(optionSoundOff,0,0,1600,900);
            document.getElementById('music').pause();
        }

            
    }
    else if(buildCheck == false)
    {
        //console.log("good");
        ctx.drawImage(image,0,0,1600,900);
        buildCheck=true;		
    }
    document.onmousedown = menu;
}
else
{	
    if(regExpScreen == true)
    {
        regExpScreen = false;
    }
    else if(buildCheck==false)
    {
        ctx.drawImage(cutscene,0,0,1600,900);
        buildCheck = true;
        gameover = false;
        window.setTimeout(gameStart,5000);		
    }
}
}
function endGame()
{
menuCheck = true;
buildCheck = false;
creditsScreen = true;
optionsScreen = false;
loadHandler();
}

function gameStart()
{
intialize();
var game = setInterval(gameScreen, 1000/50);
}
function intialize()
{
sheepPoints = 0;

playerObj.posX = 100;
playerObj.posY = 600;	

miniGame.x = 4500
miniGame.y = 637

cougar.posX = 6100;
cougar.posY = 667;

lg_obj[0].posX=2600;
lg_obj[0].posY=547;

sm_obj[0].posX=3600;
sm_obj[0].posY=547;

sm_obj[2].posX=4950;
sm_obj[2].posY=647;
sm_obj[1].posX=5100;
sm_obj[1].posY=577;
lg_obj[1].posX=5375;
lg_obj[1].posY=577;

    
sheep[0].posX =600;
sheep[0].posY =640;
sheep[0].saved = false;

sheep[1].posX =1100 ;
sheep[1].posY =640;
sheep[1].saved = false;

sheep[2].posX =2100 ;
sheep[2].posY =640;
sheep[2].saved = false;

sheep[3].posX =3100;
sheep[3].posY =640;
sheep[3].saved = false;

sheep[4].posX =4000;
sheep[4].posY =640;
sheep[4].saved = false;

sheep[5].posX =5700;
sheep[5].posY =640;
sheep[5].saved = false;

//sm_obj[1].posX =2400;
//sm_obj[1].posY =637;
breakables[0].posX =1600;
breakables[0].posY =600;
breakables[0].broken=false;

breakables[1].posX =3600;
breakables[1].posY =640;
breakables[1].broken=false;

signs[0].posX = 100;
signs[0].posY = 623;
signs[0].active = true;
signs[1].posX = 850;
signs[1].posY = 623;
signs[2].posX = 1400;
signs[2].posY = 623;
signs[3].posX = 2400;
signs[3].posY = 623;
signs[4].posX = 3800;
signs[4].posY = 623;
signs[5].posX = 4300;
signs[5].posY = 623;
signs[6].posX = 4750;
signs[6].posY = 623;
signs[7].posX = 5375;
signs[7].posY = 500;
signs[8].posX = 5800;
signs[8].posY = 623;

/*sm_obj[2].posX =3900 ;
sm_obj[2].posY =557 ;
sm_obj[3].posX =3900 ;
sm_obj[3].posY =557 ;*/
/*
breakables[2].posX =1000;
breakables[2].posY =487;
breakables[2].broken=false;
breakables[3].posX =1100;
breakables[3].posY =487;
breakables[3].broken=false;
breakables[4].posX =1200;
breakables[4].posY =487;
breakables[4].broken=false;
breakables[5].posX =1300;
breakables[5].posY =420;
breakables[5].broken=false;
breakables[6].posX =1700;
breakables[6].posY =537;
breakables[6].broken=false;

breakables[7].posX =2300;
breakables[7].posY =637;
breakables[7].broken=false;
breakables[8].posX =2400;
breakables[8].posY =637;
breakables[8].broken=false;
breakables[9].posX =2400;
breakables[9].posY =537;
breakables[9].broken=false;
breakables[10].posX =2400;
breakables[10].posY =310;
breakables[10].broken=false;
breakables[11].posX =2500;
breakables[11].posY =310;
breakables[11].broken=false;
breakables[12].posX =2600;
breakables[13].posX =2600;
breakables[13].posY =637;
breakables[13].broken=false;
breakables[14].posX =2700;
breakables[14].posY =637;
breakables[14].broken=false;
breakables[15].posX =2700;
breakables[15].posY =537;
breakables[15].broken=false;
breakables[16].posX =2700;
breakables[16].posY =310;
breakables[16].broken=false;

breakables[17].posX =5350;
breakables[17].posY =637;
breakables[17].broken=false;
breakables[18].posX =5450;
breakables[18].posY =537;
breakables[18].broken=false;
breakables[19].posX =5560;
breakables[19].posY =637;
breakables[19].broken=false;*/

}


function setPositionLvl2() {
lvlFlag = false;
lastLevel = true;

playerObj.posX = 200;
playerObj.posY = 600;

signs[9].posX = 100;
signs[9].posY = 623;

aBranch[0].posX = 150;
aBranch[0].posY = 580;

aBranch[1].posX = 300;
aBranch[1].posY = 400;

aBranch[2].posX = 2450;
aBranch[2].posY = 580;

aBranch[3].posX = 750;
aBranch[3].posY = 737;
aBranch[3].width = gameWorld.width;

aBranch[4].posX = 150;
aBranch[4].posY = 220;

aBranch[5].posX = 500;
aBranch[5].posY = 450;

//cougar.posX = 200;
//cougar.posY = 667;

/*breakables[0].posX =100;
breakables[0].posY =637;
breakables[0].broken=false;
breakables[1].posX =200;
breakables[1].posY =537;
breakables[1].broken=false;
breakables[2].posX =300;
breakables[2].posY =487;
breakables[2].broken=false;
breakables[3].posX =400;
breakables[3].posY =487;
breakables[3].broken=false;

breakables[4].posX =500;
breakables[4].posY =487;
breakables[4].broken=false;
breakables[5].posX =600;
breakables[5].posY =420;
breakables[5].broken=false;
breakables[6].posX =700;
breakables[6].posY =537;
breakables[6].broken=false;

breakables[7].posX =800;
breakables[7].posY =637;
breakables[7].broken=false;
breakables[8].posX =900;
breakables[8].posY =637;
breakables[8].broken=false;
breakables[9].posX =1000;
breakables[9].posY =537;
breakables[9].broken=false;
breakables[10].posX =1100;
breakables[10].posY =310;
breakables[10].broken=false;
breakables[11].posX =1200;
breakables[11].posY =310;
breakables[11].broken=false;*/

sheep[0].posX =20;
sheep[0].posY =1640;
sheep[0].saved = false;

sheep[1].posX =300 ;
sheep[1].posY =2640;
sheep[1].saved = false;

sheep[2].posX =500 ;
sheep[2].posY =3640;
sheep[2].saved = false;

sheep[3].posX =750;
sheep[3].posY =4640;
sheep[3].saved = false;

sheep[4].posX =600;
sheep[4].posY =5640;
sheep[4].saved = false;

sheep[5].posX =50;
sheep[5].posY =4000;
sheep[5].saved = false;

miniGame.x = 0;
miniGame.y = 0;

}

function gameScreen()
{
update();

side_scroller();

//render();
}

function side_scroller(){
playerObj.posX = Math.max(0, Math.min(playerObj.posX, gameWorld.width - playerObj.width));
    
camera.x = Math.floor(playerObj.posX + (playerObj.width/2) - (camera.width/2));
camera.y = Math.floor(playerObj.posY + (playerObj.height/2) - (camera.height/2));

if (playerObj.posX < camera.leftInnerBoundary()){
    camera.x = Math.floor(playerObj.posX - (camera.width * 0.25));	
}
if (playerObj.posY < camera.topInnerBoundary()){
    camera.y = Math.floor(playerObj.posY - (camera.height*0.25));	
}
if (playerObj.posX + playerObj.width > camera.rightInnerBoundary()){
    camera.x = Math.floor(playerObj.posX + playerObj.width - (camera.width *0.75));	
}
if (playerObj.posY + playerObj.height > camera.bottomInnerBoundary()){
    camera.y = Math.floor(playerObj.posY + playerObj.height - (camera.height * 0.75));
}

if (camera.x < gameWorld.x){
    camera.x = gameWorld.x;	
}
if (camera.y < gameWorld.y){
    camera.y = gameWorld.y;	
}
if (camera.x + camera.width > gameWorld.x + gameWorld.width){
    camera.x = gameWorld.x + gameWorld.width - camera.width;	
}
if (camera.y + camera.height > gameWorld.heigth){
    camera.y = gameWorld.heigth - camera.height;	
}

camera.vx = camera.x - camera.previousX;

distantBackground.x += camera.vx / 4;
//foregroundBackground.x += camera.vx / 2;
//foreground2Background.x += camera.vx / 2;

camera.previousX = camera.x;
}

collisionObj.y = (playerObj.posY + playerObj.height - collisionObj.height)+1;
collisionObj.x = playerObj.posX+10;

function update()
{
if(gameOver==false)
    {
    
    collisionObj.y = (playerObj.posY + playerObj.height - collisionObj.height)+1;
    if (isMoveRight){
        collisionObj.x = playerObj.posX+10;
    }
    else if (isMoveLeft){
        collisionObj.x = playerObj.posX+53;	
    }
    
    //SpaceBar
		if(key[32])
		{
			if(attackable){
				if (countA >= 0 && countA < 10){
					isAttack = true;
				}
				else{
					isAttack = false;
				}
				playerObj.stopped = false;
				if (signIndex != -1 && !signs[signIndex].read){
					signs[signIndex].active = false;
					signs[signIndex].read = true;
					signs[signIndex].timesRead = 0;
				}
				countA++;
			}
		}
    //W
    if(key[38])
    {
        if(!isJump&&jumpable)
        {
            playerObj.posY = playerObj.posY-1;
            isJump = true;
        }	
    }
    //A
    if(key[37])
    {
        if(playerObj.stopped){
            isMoveLeft = false;
        }
        else{
            if (signs[0].active){
                signs[0].active = false;	
            }
            isMoveLeft = true;
            playerObj.state = 1;
            movingRight = false;
        }
    }
    //S
    if(key[40])
    {
        if(playerObj.stopped){
            isDucking = false;
        }
        else{
            if(crouchable){
                isDucking = true;
            }
        }
    }
    //D
    if(key[39])
    {
        if (playerObj.stopped){
            isMoveRight = false;
        }
        else{
            if (signs[0].active){
                signs[0].active = false;	
            }
            isMoveRight = true;
            playerObj.state = 0;
            movingRight = true;
        }
    }
    
    //SpaceBar
    if(!key[32])
    {
        isAttack = false;
        countA = 0;
    }
    //W
    
    //A 
    if(!key[37])
    {
        isMoveLeft = false;
    }
    //S
    if(!key[40])
    {
        isDucking = false;
    }
    //D
    if(!key[39])
    {
        isMoveRight = false;
    }
    
		for(var i =0; i<signs.length; i++)
		{
			if(playerObj.posX+40 === signs[i].posX)
       		{
            	if (!signs[i].read){
					//console.log("collsion with sign");
            		playerObj.stopped = true;
            		signs[i].active = true;
            		signIndex = i;
				}
        	}
			else if( (hitTest(playerObj, signs[i]) && signs[i].read) && signs[i].timesRead !=0){
				signs[i].active = true;
			}
			else if( (!hitTest(playerObj,signs[i])) && signs[i].timesRead === 0){
				signs[i].timesRead++;
			}
			else if (signs[i].timesRead > 0){
				signs[i].active = false;	
			}
			else
			{
					//signs[i].active = false;
			}
				
		}
    
    collision=false;
    // Preform actions
    if(isJump)
    {
        if( ((playerObj.posY + playerObj.height) >= floorLvl)) //quando passa do nivel do chao
            {
                playerObj.jumpDecay = .5;
                playerObj.jumpStrength = 18;
                playerObj.posY = (floorLvl-playerObj.height);
                playerDirec = 0;
                isJump = false;
                //falling = true;
            }
            
            //Gravity equation...
            else if(playerObj.posY != floorLvl)
            {
                playerDirec = playerObj.jumpStrength - playerObj.jumpDecay
                //collide = false;
                if (playerDirec < 0 ){ //caindo
                    for (var i = 0; i< breakables.length; i++){
                        if (hitTest(collisionObj,breakables[i])&&breakables[i].broken==false){
                                floorLvl = breakables[i].posY;
                                playerObj.posY =breakables[i].posY-playerObj.height;
                                collision = true;
                                
                                //console.log("top of box:"+breakables[i].posY);
                                //collide = true;	
                                //falling = false;
                        }
                    }
                    for (var i = 0; i< sm_obj.length; i++){
                        if (hitTest(collisionObj,sm_obj[i])){
                                floorLvl = sm_obj[i].posY;
                                playerObj.posY =sm_obj[i].posY-playerObj.height;
                                collision = true;
                                
                                //console.log("top of box:"+breakables[i].posY);
                                //collide = true;	
                                //falling = false;
                        }
                    }
                    for (var i = 0; i< lg_obj.length; i++){
                        if (hitTest(collisionObj,lg_obj[i])){
                                floorLvl = lg_obj[i].posY;
                                playerObj.posY =lg_obj[i].posY-playerObj.height;
                                collision = true;
                                
                                //console.log("top of box:"+breakables[i].posY);
                                //collide = true;	
                                //falling = false;
                        }
                    }
                }
                /*else{
                    for (var i = 0; i< breakables.length; i++){
                        if (hitTest(playerObj,breakables[i])&&breakables[i].broken==false){
                            console.log("bateu");
                                playerObj.posY = breakables[i].posY+breakables[i].height+1;
                                //playerDirec= 0;
                                falling = true;
                        }
                    }
                }*/
                if(!collision)
                {
                    floorLvl = 737;
                    // constantly updates playerOne's Y position
                    playerObj.posY -= playerDirec;
                    // constantly increases the amount of pull downwards by one. 
                    playerObj.jumpDecay += 1;
                }
            }
    }
    
    collide=false;
    for (var i = 0; i< aBranch.length; i++){
        if (hitTest(collisionObj,aBranch[i])){
                collide = true;	
                falling = false;
                collisionIndex = i;
                //floorLvl = aBranch[i].posY;
        }
    }
    
    if (!collide&&!isJump){
        floorLvl=737;
        
        if (playerObj.posY<floorLvl)
        {
            if(!falling)
            {		
                playerObj.jumpDecay = 0.5;
                falling = true;
            }
            else
            {
                for(var i=0; i<breakables.length; i++)
                {
                    if(hitTest(breakables[i],playerObj))
                    {
                        if(!breakables[i].broken)
                        {
                            collision=true;
                            if (playerObj.posY+playerObj.height > breakables[i].posY)
                                playerObj.posY = breakables[i].posY-playerObj.height+.5;
                                falling = false;
                        }
                    }
                }
                for(var i=0; i<sm_obj.length; i++)
                {
                    if(hitTest(sm_obj[i],playerObj))
                    {
                        collision=true;
                        if (playerObj.posY+playerObj.height > sm_obj[i].posY)
                            playerObj.posY = sm_obj[i].posY-playerObj.height+.5;
                            falling = false;
                    }
                }
                for(var i=0; i<lg_obj.length; i++)
                {
                    if(hitTest(lg_obj[i],playerObj))
                    {
                        collision=true;
                        if (playerObj.posY+playerObj.height > lg_obj[i].posY)
                            playerObj.posY = lg_obj[i].posY-playerObj.height+.5;
                            falling = false;
                    }
                }
                if(!collision)
                {
                    playerObj.posY+= playerObj.jumpDecay;
                    playerObj.jumpDecay += 1;
                    if(!isDucking)
                    {
                        if (playerObj.posY >600){
                            playerObj.posY = 600;	
                        }
                    }
                    else
                    {
                            if (playerObj.posY >650)
                            {
                                playerObj.posY = 650;
                            }
                    }
                }
            }
        }
        else{
            falling = false;

        }
    }
    collision = false;
    if(isMoveLeft)
    {
        for(var i=0; i<breakables.length; i++)
        {
            if(hitTest(breakables[i],playerObj))
            {
                if(!breakables[i].broken && (playerObj.posY-playerObj.height) > breakables[i].posY)
                {
                    console.log("hit");
                    collision=true;
                }
            }
        }
        for(var i=0; i<sm_obj.length; i++)
        {
            if(hitTest(sm_obj[i],playerObj))
            {
                if((playerObj.posY-playerObj.height) > sm_obj[i].posY)
                {
                    console.log("hit");
                    collision=true;
                }
            }
        }
        for(var i=0; i<lg_obj.length; i++)
        {
            if(hitTest(lg_obj[i],playerObj))
            {
                if((playerObj.posY-playerObj.height) > lg_obj[i].posY)
                {
                    console.log("hit");
                    collision=true;
                }
            }
        }
        if (collision == false)
        {
            playerObj.posX -= playerObj.speed;
        }
        
        for(var i=0; i<breakables.length; i++)
        {
            if(hitTest(breakables[i],playerObj))
            {
                if(!breakables[i].broken)
                {
                    if(breakables[i].posY<(playerObj.posY+playerObj.height)-1)
                    {
                        collision = true;
                    }
                }
            }
        }
        for(var i=0; i<sm_obj.length; i++)
        {
            if(hitTest(sm_obj[i],playerObj))
            {
                    if(sm_obj[i].posY<(playerObj.posY+playerObj.height)-1)
                    {
                        collision = true;
                    }
            }
        }
        for(var i=0; i<lg_obj.length; i++)
        {
            if(hitTest(lg_obj[i],playerObj))
            {
                    if(lg_obj[i].posY<(playerObj.posY+playerObj.height)-1)
                    {
                        collision = true;
                    }
            }
        }
        if(collision == true)
        {
            playerObj.posX+= 20;	
        }
    }
    
    collision = false;
    if(isMoveRight)
    {
        
        for(var i=0; i<breakables.length; i++)
        {
            if(hitTest(breakables[i],playerObj))
            {
                if(!breakables[i].broken && (playerObj.posY-playerObj.height) > breakables[i].posY)
                {
                    console.log("hit");
                    collision=true;
                }
            }
        }
        for(var i=0; i<sm_obj.length; i++)
        {
            if(hitTest(sm_obj[i],playerObj))
            {
                if((playerObj.posY-playerObj.height) > sm_obj[i].posY)
                {
                    console.log("hit");
                    collision=true;
                }
            }
        }
        for(var i=0; i<lg_obj.length; i++)
        {
            if(hitTest(lg_obj[i],playerObj))
            {
                if((playerObj.posY-playerObj.height) > lg_obj[i].posY)
                {
                    console.log("hit");
                    collision=true;
                }
            }
        }
        if (collision == false)
        {
            playerObj.posX += playerObj.speed;
        }
        
        for(var i=0; i<breakables.length; i++)
        {
            if(hitTest(breakables[i],playerObj))
            {
                if(!breakables[i].broken)
                {
                    if(breakables[i].posY<(playerObj.posY+playerObj.height)-1)
                    {
                        collision = true;
                    }
                }
            }
        }
        for(var i=0; i<sm_obj.length; i++)
        {
            if(hitTest(sm_obj[i],playerObj))
            {
                if(sm_obj[i].posY<(playerObj.posY+playerObj.height)-1)
                {
                    collision = true;
                }
            }
        }
        for(var i=0; i<lg_obj.length; i++)
        {
            if(hitTest(lg_obj[i],playerObj))
            {

                if(lg_obj[i].posY<(playerObj.posY+playerObj.height)-1)
                {
                    collision = true;
                }

            }
        }
        if(collision == true)
        {
            playerObj.posX-= 20;	
        }
    }
    
    if(isDucking)
    {
        isStanding = false;
        if (isDucked == false)
        {
            isDucked = true;	
            playerObj.height = 88;
            playerObj.posY = playerObj.posY+50;
            floorlvl = floorlvl+50;
        }
    }
    if(!isDucking)
    {
        /*for(var i=0; i<breakables.length; i++)
        {
            if(hitTest(playerObj,breakables[i]))
            {
                isDucking = true;
                playerObj.posY = breakables[i].posY+breakables[i].height;
                //collide = false;
                //collision = false;
                //falling=true;
            }
        }
        if(!isDucking)
        {*/
            isDucked = false;
            if(isStanding == false)
            {
                isStanding = true;
                playerObj.height = 138;	
                playerObj.posY = playerObj.posY-50;
                floorlvl = floorlvl-50;
            }
        //}
    }
    
    for(var i=0; i<sheep.length; i++)
    {
        if(hitTest(playerObj,sheep[i]))
        {
            if(!sheep[i].saved==true)
            {
                sheep[i].saved=true;
                sheepPoints++;
            }
        }
        if(sheep[i].saved)
        {
            sheep[i].posX--;	
        }
    }
    
    sheepSaved = 0;
    if(cougar.saved==false)
    {
        for(var i=0; i<sheep.length; i++)
        {
            if(sheep[i].saved)
                {
                    sheepSaved++;
                }
        }
    }
    if(sheepSaved>5)
    {
        cougar.posX = cougar.posX+5;	
    }

    if(isAttack)
    {
        
        for(var i=0; i<breakables.length; i++)
        {
            
            if(hitTest(attackBox,breakables[i]))
            {
                breakables[i].broken = true;
            }
        }
    }

    if(movingRight)
    {
        attackBox.posX = playerObj.posX+playerObj.width;
        attackBox.posY = playerObj.posY;
    }
    else
    {
        attackBox.posX = playerObj.posX-45;
        attackBox.posY = playerObj.posY;
    }
    
    if(hitTest(playerObj,miniGame))
    {
        if(currentLvl==1)
        {
            ctx.fillStyle = 'black';
            ctx.font = "50px Helvetica";
            
            textOpen = true;
            writeText();
            //ctx.clearRect(0,0,1600,900);
			
			ctx.drawImage(regScreen,0,0);
            
			
			
            ctx.fillText(regExpOne, textBoxArray[0].xCoord + 35, textBoxArray[0].yCoord + 60);
            ctx.fillText(regExpTwo, textBoxArray[1].xCoord, textBoxArray[1].yCoord + 60);
            ctx.fillText(regExpThree, textBoxArray[2].xCoord + 60, textBoxArray[2].yCoord + 60);
            
            for(i = 0; i < levelWords.length; i++)
            {
                var coordX;
                if(i < 3)
                {
                    coordX = 235;
                    if(regExp1.test(levelWords[i]))
                    {
                        ctx.fillStyle = "#FEA301"; // yellow
						ctx.fillRect(coordX - 100, (i + 1)*100 + 145, 394, 75);
						ctx.fillStyle = 'black';
                    }
					if(levelWords[i] == correctWords[0])
					{
						ctx.strokeStyle = 'black';
						ctx.miterLimit = 2;
						ctx.lineWidth = 6;
						ctx.strokeText(levelWords[i], coordX, (i + 1)*100 + 200);
					}
					if(regExp2.test(levelWords[i]))
                    {
						ctx.fillStyle = "#F2561A"; // red
						ctx.fillRect(coordX - 100, (i + 1)*100 + 145, 394, 10);
						ctx.fillRect(coordX - 100, (i + 1)*100 + 210, 394, 10);
						ctx.fillStyle = 'black';
                    }
					if(regExp3.test(levelWords[i]))
                    {
						ctx.strokeStyle = 'black';
						ctx.miterLimit=2;
						ctx.lineWidth = 6;
						ctx.strokeText(levelWords[i], coordX, (i + 1)*100 + 200);
						ctx.fillStyle = "#00BC9F"; // blue
                    }
					ctx.fillText(levelWords[i], coordX, (i + 1)*100 + 200);
					ctx.fillStyle = 'black';
                }
                else if(i < 6)
                {
                    coordX = 675;
					if(levelWords[i] == correctWords[1])
					{
						ctx.strokeStyle = 'black';
						ctx.miterLimit=2;
						ctx.lineWidth = 6;
						ctx.strokeText(levelWords[i], coordX, (i - 3 + 1)*100 + 200);
					}
                    if(regExp2.test(levelWords[i]))
                    {
                        ctx.fillStyle = "#F2561A"; // red
						ctx.fillRect(coordX - 85, (i - 3 + 1)*100 + 145, 394, 10);
						ctx.fillRect(coordX - 85, (i - 3 + 1)*100 + 210, 394, 10);
						ctx.fillStyle = 'black';
                    }
					if(regExp3.test(levelWords[i]))
                    {
						ctx.strokeStyle = 'black';
						ctx.miterLimit=2;
						ctx.lineWidth = 6;
						ctx.strokeText(levelWords[i], coordX, (i - 3 + 1)*100 + 200);
						ctx.fillStyle = "#00BC9F"; // blue
                    }
                    ctx.fillText(levelWords[i], coordX, (i - 3)*100 + 300);
                    ctx.fillStyle = 'black';
                }
                else if(i < 9)
                {
                    coordX = 1140;
					if(levelWords[i] == correctWords[2])
					{
						ctx.strokeStyle = 'black';
						ctx.miterLimit= 2;
						ctx.lineWidth = 6;
						ctx.strokeText(levelWords[i], coordX, (i - 6)*100 + 300);
					}
                    if(regExp3.test(levelWords[i]))
                    {
						ctx.strokeStyle = 'black';
						ctx.miterLimit= 2;
						ctx.lineWidth = 6;
						ctx.strokeText(levelWords[i], coordX, (i - 6)*100 + 300);
						ctx.fillStyle = "#00BC9F"; // blue
                    }
                    ctx.fillText(levelWords[i], coordX, (i - 6)*100 + 300);
                    ctx.fillStyle = 'black';
                }
            }
            
            //ctx.drawImage(submitImg,submitButtonArray[0].posX, submitButtonArray[0].posY);
           // ctx.drawImage(submitImg,submitButtonArray[1].posX, submitButtonArray[1].posY, 50, 50);
           // ctx.drawImage(submitImg,submitButtonArray[2].posX, submitButtonArray[2].posY, 50, 50);
            ctx.fillText(sheepPoints+"/6",210,100,50);
            //ctx.fillRect(characterBoxArray[0].posX, characterBoxArray[0].posY, 98, 54);
           // ctx.fillRect(characterBoxArray[1].posX, characterBoxArray[1].posY, 98, 54);
           // ctx.fillRect(characterBoxArray[2].posX, characterBoxArray[2].posY, 98, 54);
           // ctx.fillRect(characterBoxArray[3].posX, characterBoxArray[3].posY, 98, 54);
           // ctx.fillRect(characterBoxArray[4].posX, characterBoxArray[4].posY, 98, 54);
		   	if(counter==1)
			{
		   		ctx.drawImage(expInstr1,0,0); //help me
			}
			else if(counter==2)
			{
				ctx.drawImage(expInstr2,0,0);
			}
			else if(counter==3)
			{
				ctx.drawImage(expInstr3,0,0);
			}
			else if(counter==4)
			{
				ctx.drawImage(expInstr4,0,0);
			}
			else if(counter==5)
			{
				ctx.drawImage(expInstr5,0,0);
			}
			else if(counter==6)
			{
				ctx.drawImage(expInstr6,0,0);
			}
			else if(counter==7)
			{
				ctx.drawImage(expInstr7,0,0);
			}
			else if(counter==8)
			{
				ctx.drawImage(expInstr8,0,0);
			}
			else if(counter==9)
			{
				ctx.drawImage(expInstr9,0,0);
			}
			else if(counter==10)
			{
				ctx.drawImage(expInstr10,0,0);
			}
			else if(counter==11)
			{
				ctx.drawImage(expInstr11,0,0);
			}
			else if(counter==12)
			{
				ctx.drawImage(expInstr12,0,0);
			}
			else if(counter==13)
			{
				ctx.drawImage(expInstr13,0,0);
			}
			else if(counter==14)
			{
				ctx.drawImage(expInstr14,0,0);
			}
			else if(counter==15)
			{
				ctx.drawImage(expInstr15,0,0);
			}
			else if(counter==16)
			{
				ctx.drawImage(expInstr16,0,0);
			}
			else if(counter==17)
			{
				ctx.drawImage(expInstr17,0,0);
			}
			else if(counter==18)
			{
				ctx.drawImage(expInstr18,0,0);
			}
			else if(counter==19)
			{
				ctx.drawImage(expInstr19,0,0);
			}
			else if(counter==20)
			{
				ctx.drawImage(expInstr20,0,0);
			}
			else if(counter==21)
			{
				ctx.drawImage(expInstr21,0,0);
			}
			else if(counter==22)
			{
				ctx.drawImage(expInstr22,0,0);
			}
			else if(counter==23)
			{
				ctx.drawImage(expInstr23,0,0);
			}
			else if(counter==24)
			{
				ctx.drawImage(expInstr24,0,0);
			}
			this.onmouseup = function()
			{
				counter++;
			}

			
        }
    }
    else
    {
        currentTextBox = null;
        textOpen = false;
        render();
    }
    
    if (playerObj.posX > 6000){
        currentLvl = 2;
        lvlFlag = true;	
    }
    
    if (currentLvl === 2 && lvlFlag){
        if(lastLevel==false)
        {
            ctx.drawImage(cutscene,0,0,1600,900);
            window.setTimeout(setPositionLvl2,5000);
        }
        else
        {
            ctx.drawImage(endScene,0,0,1600,900);
            gameOver = true;
            setTimeout(endGame,5000);
        }
    }

    if(!regExp1.test(levelWords[0]) && !regExp1.test(levelWords[1]) && regExp1.test(levelWords[2]) 
    && !regExp2.test(levelWords[0])&& !regExp2.test(levelWords[1]) && regExp2.test(levelWords[2]) && regExp2.test(levelWords[3]) && !regExp2.test(levelWords[4]) && !regExp2.test(levelWords[5]) 
    && !regExp3.test(levelWords[0])&& !regExp3.test(levelWords[1]) && regExp3.test(levelWords[2]) && regExp3.test(levelWords[3]) 
    && !regExp3.test(levelWords[4]) && !regExp3.test(levelWords[5]) && !regExp3.test(levelWords[6]) && regExp3.test(levelWords[7]) && !regExp3.test(levelWords[8]))
    {
        jumpable =true;
    }
}
}

function hitTest(r1,r2){
return Math.abs(r1.centerX() - r2.centerX()) < r1.halfWidth() + r2.halfWidth() && Math.abs(r1.centerY() - r2.centerY()) < r1.halfHeight()+r2.halfHeight();	
}

function render()
{
if(gameOver==false)
{
    ctx.clearRect(0,0,1600,900);
    
    ctx.save();
    ctx.translate(-camera.x, -camera.y);
    if (currentLvl === 2 && lvlFlag)
        ctx.drawImage(cutscene,0,0,1600,900);
    if (currentLvl === 2 && lvlFlag && lastLevel)
        ctx.drawImage(endScene,0,0,1600,900);
    
    if (currentLvl === 1){
        ctx.drawImage(lvl1_background,0,0,6336,900, 0, 10, 6336, 900);
        ctx.drawImage(lvl1_background,distantBackground.sourceX,distantBackground.sourceY,distantBackground.sourceWidth,distantBackground.sourceHeight, Math.floor(distantBackground.x), Math.floor(distantBackground.y), distantBackground.width, distantBackground.height);
        ctx.drawImage(lvl1_background,foregroundBackground.sourceX,foregroundBackground.sourceY,foregroundBackground.sourceWidth,foregroundBackground.sourceHeight, Math.floor(foregroundBackground.x), Math.floor(foregroundBackground.y), foregroundBackground.width, foregroundBackground.height);
        ctx.drawImage(lvl1_background,foreground2Background.sourceX,foreground2Background.sourceY,foreground2Background.sourceWidth,foreground2Background.sourceHeight, Math.floor(foreground2Background.x), Math.floor(foreground2Background.y), foreground2Background.width, foreground2Background.height);
    
        ctx.drawImage(sheepWizard,miniGame.x, miniGame.y);
        
        for(var i =0; i<signs.length; i++)
        {
            ctx.drawImage(sign,signs[i].posX,signs[i].posY);
            
            if(signs[i].active)
            {
                if(i==0)
                    ctx.drawImage(moveInstr,signs[i].posX+70,signs[i].posY-250);
                else if(i==1)
                    ctx.drawImage(sheepInstr,signs[i].posX+70,signs[i].posY-250);
                else if(i==2)
                    ctx.drawImage(atkInstr,signs[i].posX+70,signs[i].posY-250);
                else if(i==3)
                    ctx.drawImage(crouchInstr,signs[i].posX+70,signs[i].posY-250);
                else if(i==4)
                {
                    ctx.drawImage(regInstr2,signs[i].posX+70,signs[i].posY-250);
                    ctx.drawImage(regInstr1,signs[i].posX+70,signs[i].posY-250-265);
                }
                else if(i==5)
                {
                    ctx.drawImage(regInstr4,signs[i].posX+70,signs[i].posY-250);
                    ctx.drawImage(regInstr3,signs[i].posX+70,signs[i].posY-250-265);
                }
                else if(i==6)
                    ctx.drawImage(jumpInstr,signs[i].posX+70,signs[i].posY-250);
                else if(i==7)
                    ctx.drawImage(restartInstr,signs[i].posX+70,signs[i].posY-250);
                else if(i==8)
                    ctx.drawImage(endLvlInstr,signs[i].posX+70,signs[i].posY-250);

                    

            }
        }
    }
    else if (currentLvl === 2){
        ctx.drawImage(lvl1_background,0,0,6336,900, 0, 10, 6336, 900);
        ctx.drawImage(lvl1_background,distantBackground.sourceX,distantBackground.sourceY,distantBackground.sourceWidth,distantBackground.sourceHeight, Math.floor(distantBackground.x), Math.floor(distantBackground.y), distantBackground.width, distantBackground.height);
        ctx.drawImage(lvl1_background,foregroundBackground.sourceX,foregroundBackground.sourceY,foregroundBackground.sourceWidth,foregroundBackground.sourceHeight, Math.floor(foregroundBackground.x), Math.floor(foregroundBackground.y), foregroundBackground.width, foregroundBackground.height);
        ctx.drawImage(lvl1_background,foreground2Background.sourceX,foreground2Background.sourceY,foreground2Background.sourceWidth,foreground2Background.sourceHeight, Math.floor(foreground2Background.x), Math.floor(foreground2Background.y), foreground2Background.width, foreground2Background.height);
        
        ctx.drawImage(sign,signs[9].posX,signs[9].posY);
        ctx.drawImage(finishInstr,signs[9].posX+70,signs[9].posY-250);

    }
    
    
    ctx.drawImage(sheepIcon,camera.x,0);
    ctx.fillStyle = 'black';
    ctx.font = "50px Arial";
    ctx.fillText(sheepSaved+"/6",camera.x+50,50,50);
    
    if(playerObj.state == 0){ //right
         if(isJump){
            if (isDucking){
                ctx.drawImage(llama_duck_right,playerObj.posX, playerObj.posY);
            } 
            else{
                if (playerDirec < 0){
                    ctx.drawImage(llama_jump_sprite, 315, 138, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else{
                    if (count >= 0 && count <20){
                        ctx.drawImage(llama_jump_sprite, 0, 138, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);		
                    }
                    else if (count>=20 && count <=40){
                        ctx.drawImage(llama_jump_sprite, 156, 138, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                    }
                }
            }
        }
        else if(isMoveRight){
            if (isDucking){
                if (countR >= 0 && countR<5){
                    ctx.drawImage(llama_duck_sprite, 0, 88, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);	
                }
                else if (countR >= 5 && countR<10){
                    ctx.drawImage(llama_duck_sprite, 141, 88, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);	
                }
                else if (countR >= 10 && countR<15){
                    ctx.drawImage(llama_duck_sprite, 282, 88, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else if (countR >= 15 && countR<20){
                    ctx.drawImage(llama_duck_sprite, 423, 88, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else if (countR >= 20 && countR<25){
                    ctx.drawImage(llama_duck_sprite, 564, 88, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else if (countR >= 25 && countR<=30){
                    ctx.drawImage(llama_duck_sprite, 705, 88, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
            }
            else if (isAttack){
                ctx.drawImage(llama_attack_right, playerObj.posX, playerObj.posY);
            }
            else{
                if (countR >= 0 && countR<5){
                    ctx.drawImage(llama_run_sprite, 0, 137, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);	
                }
                else if (countR >= 5 && countR<10){
                    ctx.drawImage(llama_run_sprite, 163, 137, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);	
                }
                else if (countR >= 10 && countR<15){
                    ctx.drawImage(llama_run_sprite, 317, 137, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
                else if (countR >= 15 && countR<20){
                    ctx.drawImage(llama_run_sprite, 460, 137, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
                else if (countR >= 20 && countR<25){
                    ctx.drawImage(llama_run_sprite, 602, 137, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
                else if (countR >= 25 && countR<=30){
                    ctx.drawImage(llama_run_sprite, 744, 137, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
            }
        }
        else{
            if(isDucking){
                ctx.drawImage(llama_duck_right,playerObj.posX, playerObj.posY);
            }
            else if (isAttack){
                ctx.drawImage(llama_attack_right, playerObj.posX, playerObj.posY);
            }
            else{
                ctx.drawImage(llama_right,playerObj.posX+9, playerObj.posY);
            }
        }
    }
    if(playerObj.state == 1){ //left
        if(isJump){
            if (isDucking){
                ctx.drawImage(llama_duck_left,playerObj.posX, playerObj.posY);	
            }
            else{
                if (playerDirec < 0){
                    ctx.drawImage(llama_jump_sprite, 294, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else{
                    if (count >= 0 && count <20){
                      ctx.drawImage(llama_jump_sprite, 6, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);		
                    }
                    else if (count>=20 && count <=40){
                      ctx.drawImage(llama_jump_sprite, 152, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                    }
                }
            }
        }
        else if (isMoveLeft){
            if (isDucking){
                if (countR >= 0 && countR<5){
                    ctx.drawImage(llama_duck_sprite, 0, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);	
                }
                else if (countR >= 5 && countR<10){
                    ctx.drawImage(llama_duck_sprite, 141, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);	

                }
                else if (countR >= 10 && countR<15){
                    ctx.drawImage(llama_duck_sprite, 282, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else if (countR >= 15 && countR<20){
                    ctx.drawImage(llama_duck_sprite, 423, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else if (countR >= 20 && countR<25){
                    ctx.drawImage(llama_duck_sprite, 564, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
                else if (countR >= 25 && countR<=30){
                    ctx.drawImage(llama_duck_sprite, 705, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY, playerObj.width, playerObj.height);
                }
            }
            else if (isAttack){
                ctx.drawImage(llama_attack_left, playerObj.posX, playerObj.posY);
            }
            else{
                if (countR >= 0 && countR<5){
                    ctx.drawImage(llama_run_sprite, 0, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);	
                }
                else if (countR >= 5 && countR<10){
                    ctx.drawImage(llama_run_sprite, 163, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);	
                }
                else if (countR >= 10 && countR<15){
                    ctx.drawImage(llama_run_sprite, 287, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
                else if (countR >= 15 && countR<20){
                    ctx.drawImage(llama_run_sprite, 443, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
                else if (countR >= 20 && countR<25){
                    ctx.drawImage(llama_run_sprite, 599, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }
                else if (countR >= 25 && countR<=30){
                    ctx.drawImage(llama_run_sprite, 744, 0, playerObj.width, playerObj.height, playerObj.posX, playerObj.posY+13, playerObj.width, playerObj.height);
                }	
            }
        }
        else
            if(isDucking){
                ctx.drawImage(llama_duck_left,playerObj.posX, playerObj.posY);
            }
            else if (isAttack){
                ctx.drawImage(llama_attack_left, playerObj.posX, playerObj.posY);
            }
            else{
                ctx.drawImage(llama_left,playerObj.posX+9, playerObj.posY);
            }
        }	
    
    for (var i=0; i<sheep.length;i++)
    {
        if(sheep[i].saved==false)
        {
            ctx.drawImage(sheep_right,sheep[i].posX, sheep[i].posY);	
        }
        else
        {
            ctx.drawImage(sheep_left,sheep[i].posX, sheep[i].posY);
        }
    }
        
    if(sheepSaved==6)
    {
        ctx.drawImage(cougar_right,cougar.posX,cougar.posY);
    }
    else
    {
        ctx.drawImage(cougar_left,cougar.posX,cougar.posY);
    }
    
    for(var i=0; i<breakables.length; i++)
    {
        if(!breakables[i].broken)
        {
            ctx.drawImage(box,breakables[i].posX, breakables[i].posY);
        }
    }
    for(var i=0; i<sm_obj.length; i++)
    {
        ctx.drawImage(smallPlatform,sm_obj[i].posX,sm_obj[i].posY);	
    }
    for(var i=0; i<lg_obj.length; i++)
    {
        ctx.drawImage(largePlatform,lg_obj[i].posX,lg_obj[i].posY-20);	
    }
    
    
    count++;
    if (count ==40){
        count = 0;	
    }
    countR++;
    if (countR ==30){
        countR = 0;	
    }
    if (currentLvl === 2 && lvlFlag)
        ctx.drawImage(cutscene,0,0,1600,900);
    if (currentLvl === 2 && lvlFlag && lastLevel)
        ctx.drawImage(endScene,0,0,1600,900);
        
    ctx.drawImage(restart,1534+camera.x,10);
        
    if(1534<mouse.x && mouse.x<1600 && 0<mouse.y && mouse.y<50)
    {
        intialize();
    }
        
    ctx.restore();
}
}

function keyDown(e)
{
    key[e.keyCode] = true;
}

function keyUp(e)
{
    delete key[e.keyCode];
}

function writeText()
{
if(textOpen)
{
    document.onmousedown = function(e)
    {
        mouse.x = e.pageX - cv.offsetLeft;
        mouse.y = e.pageY - cv.offsetTop;
        
        console.log(mouse.x);
        console.log(mouse.y);
        console.log(textBoxArray[0].xCoord);
        console.log(textBoxArray[1].xCoord);
        console.log(textBoxArray[2].xCoord);
        console.log(currentTextBox);
        
        for(i = 0; i < textBoxArray.length; i++)
        {
            if(mouse.x > textBoxArray[i].xCoord && mouse.y > textBoxArray[i].yCoord && mouse.x < textBoxArray[i].xCoord+600 && mouse.y < textBoxArray[i].yCoord+100)
            {
                if(currentTextBox == null)
                {
                    currentTextBox = textBoxArray[i];
                    currentTextBox.canWrite = true;
                }
                else
                {
                    currentTextBox.canWrite = false;
                    currentTextBox = textBoxArray[i];
                    currentTextBox.canWrite = true;
                }
            }	
        }
        
        if(mouse.x >= submitButtonArray[0].posX && mouse.x <= submitButtonArray[0].posX + 254 && mouse.y >= submitButtonArray[0].posY && mouse.y <= submitButtonArray[0].posY + 70)
        {
            regExp1 = new RegExp(regExpOne);
            console.log(regExp1);
            submitButtonArray[0].clicked = true;
        }
        if(mouse.x >= submitButtonArray[1].posX && mouse.x <= submitButtonArray[1].posX + 254 && mouse.y >= submitButtonArray[1].posY && mouse.y <= submitButtonArray[1].posY + 70 && submitButtonArray[0].clicked)
        {
            regExp2 = new RegExp(regExpTwo);
            console.log(regExp2);
            submitButtonArray[1].clicked = true;
        }
        if(mouse.x >= submitButtonArray[2].posX && mouse.x <= submitButtonArray[2].posX + 254 && mouse.y >= submitButtonArray[2].posY && mouse.y <= submitButtonArray[2].posY + 70 && submitButtonArray[1].clicked)
        {
            regExp3 = new RegExp(regExpThree);
            console.log(regExp3);
            submitButtonArray[2].clicked = true;
        }
        if(sheepPoints > 0)
        {
            //?
            if(mouse.x >= characterBoxArray[0].posX && mouse.x <= characterBoxArray[0].posX + 98 && mouse.y >= characterBoxArray[0].posY && mouse.y <= characterBoxArray[0].posY + 59)
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "?";
                    sheepPoints --;
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "?";
                    sheepPoints --;
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "?";
                    sheepPoints --;
                }
            }
            //[^] 98, 54
            if(mouse.x >= characterBoxArray[1].posX && mouse.x <= characterBoxArray[1].posX + 98 && mouse.y >= characterBoxArray[1].posY && mouse.y <= characterBoxArray[1].posY + 59)
            {
                if(sheepPoints > 1)
                {
                    if(currentTextBox == textBoxArray[0])
                    {
                        regExpOne = "[^" + regExpOne + "]";
                        sheepPoints = sheepPoints - 2;
                    }
                    if(currentTextBox == textBoxArray[1])
                    {
                        regExpTwo = "[^" + regExpTwo + "]";
                        sheepPoints = sheepPoints - 2;
                    }
                    if(currentTextBox == textBoxArray[2])
                    {
                        regExpThree = "[^" + regExpThree + "]";
                        sheepPoints = sheepPoints - 2;
                    }
                }
            }
            //^
            if(mouse.x >= characterBoxArray[2].posX && mouse.x <= characterBoxArray[2].posX + 98 && mouse.y >= characterBoxArray[2].posY && mouse.y <= characterBoxArray[2].posY + 59)
            {
                if(sheepPoints > 1)
                {
                    if(currentTextBox == textBoxArray[0])
                    {
                        regExpOne = "^" + regExpOne;
                        sheepPoints = sheepPoints - 2;
                    }
                    if(currentTextBox == textBoxArray[1])
                    {
                        regExpTwo = "^" + regExpTwo;
                        sheepPoints = sheepPoints - 2;
                    }
                    if(currentTextBox == textBoxArray[2])
                    {
                        regExpThree = "^" + regExpThree;
                        sheepPoints = sheepPoints - 2;
                    }
                }
            }
            //$
            if(mouse.x >= characterBoxArray[3].posX && mouse.x <= characterBoxArray[3].posX + 98 && mouse.y >= characterBoxArray[3].posY && mouse.y <= characterBoxArray[3].posY + 59)
            {
                if(sheepPoints > 1)
                {
                    if(currentTextBox == textBoxArray[0])
                    {
                        regExpOne = regExpOne + "$";
                        sheepPoints = sheepPoints - 2;
                    }
                    if(currentTextBox == textBoxArray[1])
                    {
                        regExpTwo = regExpTwo + "$";
                        sheepPoints = sheepPoints - 2;
                    }
                    if(currentTextBox == textBoxArray[2])
                    {
                        regExpThree = regExpThree + "$";
                        sheepPoints = sheepPoints - 2;
                    }
                }
            }
            //|
            if(mouse.x >= characterBoxArray[4].posX && mouse.x <= characterBoxArray[4].posX + 98 && mouse.y >= characterBoxArray[4].posY && mouse.y <= characterBoxArray[4].posY + 59)
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "|";
                    sheepPoints--;
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "|";
                    sheepPoints--;
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "|";
                    sheepPoints--;
                }
            }
        }
    }
}

document.onkeydown = function(e)
{
    key[e.keyCode] = true;
    if(currentTextBox != null && sheepPoints != 0)
    {
        if(currentTextBox.canWrite == true)
        {
            ctx.fillStyle = 'black';
            ctx.font = "50px Arial";
            if(key[65]) // a
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "A";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "A";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "A"; 
                }
                sheepPoints--;
            }
            if(key[66]) // b
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "B";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "B";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "B"; 
                }
                sheepPoints--;
            }
            if(key[67]) // c
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "C";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "C";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "C"; 
                }
                sheepPoints--;
            }
            if(key[68]) // d
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "D";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "D";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "D"; 
                }
                sheepPoints--;
            }
            if(key[69]) // e
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "E";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "E";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "E"; 
                }
                sheepPoints--;
            }
            if(key[70]) // f
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "F";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "F";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "F"; 
                }
                sheepPoints--;
            }
            if(key[71]) // g
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "G";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "G";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "G"; 
                }
                sheepPoints--;
            }
            if(key[72]) // h
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "H";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "H";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "H"; 
                }
                sheepPoints--;
            }
            if(key[73]) // i
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "I";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "I";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "I"; 
                }
                sheepPoints--;
            }
            if(key[74]) // j
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "J";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "J";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "J"; 
                }
                sheepPoints--;
            }
            if(key[75]) // k
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "K";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "K";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "K"; 
                }
                sheepPoints--;
            }
            if(key[76]) // l
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "L";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "L";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "L"; 
                }
                sheepPoints--;
            }
            if(key[77]) // m
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "M";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "M";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "M"; 
                }
                sheepPoints--;
            }
            if(key[78]) // n
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "N";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "N";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "N"; 
                }
                sheepPoints--;
            }
            if(key[79]) // o
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "O";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "O";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "O"; 
                }
                sheepPoints--;
            }
            if(key[80]) // p
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "P";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "P";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "P"; 
                }
                sheepPoints--;
            }
            if(key[81]) // q
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "Q";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "Q";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "Q"; 
                }
                sheepPoints--;
            }
            if(key[82]) // r
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "R";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "R";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "R"; 
                }
                sheepPoints--;
            }
            if(key[83]) // s
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "S";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "S";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "S"; 
                }
                sheepPoints--;
            }
            if(key[84]) // t
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "T";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "T";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "T"; 
                }
                sheepPoints--;
            }
            if(key[85]) // u
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "U";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "U";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "U"; 
                }
                sheepPoints--;
            }
            if(key[86]) // v
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "V";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "V";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "V"; 
                }
                sheepPoints--;
            }
            if(key[87]) // w
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "W";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "W";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "W"; 
                }
                sheepPoints--;
            }
            if(key[88]) // x
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "X";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "X";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "X"; 
                }
                sheepPoints--;
            }
            if(key[89]) // y
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "Y";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "Y";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "Y"; 
                }
                sheepPoints--;
            }
            if(key[90]) // z
            {
                if(currentTextBox == textBoxArray[0])
                {
                    regExpOne = regExpOne + "Z";
                }
                if(currentTextBox == textBoxArray[1])
                {
                    regExpTwo = regExpTwo + "Z";
                }
                if(currentTextBox == textBoxArray[2])
                {
                    regExpThree = regExpThree + "Z"; 
                }
                sheepPoints--;
            }
        }
    }
    if(key[8]) //delete button
    {
        if(currentTextBox == textBoxArray[0] && regExpOne.length != 0)
        {
            if(regExpOne.substr(regExpOne.length-1, regExpOne.length) == "]")
            {
                regExpOne = regExpOne.substr(0, regExpOne.length - 1);
                regExpOne = regExpOne.substr(2, regExpOne.length);
                sheepPoints = sheepPoints + 2;
            }
            else if(regExpOne.substr(regExpOne.length-1, regExpOne.length) == "^" || regExpOne.substr(regExpOne.length-1, regExpOne.length) == "$")
            {
                regExpOne = regExpOne.substr(0, regExpOne.length - 1);
                sheepPoints = sheepPoints + 2;
            }
            else
            {
                regExpOne = regExpOne.substr(0, regExpOne.length - 1);
                sheepPoints++;
            }
        }
        if(currentTextBox == textBoxArray[1] && regExpTwo.length != 0)
        {
            if(regExpTwo.substr(regExpTwo.length-1, regExpTwo.length) == "]")
            {
                regExpTwo = regExpTwo.substr(0, regExpTwo.length - 1);
                regExpTwo = regExpTwo.substr(2, regExpTwo.length);
                sheepPoints = sheepPoints + 2;
            }
            else if(regExpTwo.substr(regExpTwo.length-1, regExpTwo.length) == "^" || regExpTwo.substr(regExpTwo.length-1, regExpTwo.length) == "$")
            {
                regExpTwo = regExpTwo.substr(0, regExpTwo.length - 1);
                sheepPoints = sheepPoints + 2;
            }
            else
            {
                regExpTwo = regExpTwo.substr(0, regExpTwo.length - 1);
                sheepPoints++;
            }
        }
        if(currentTextBox == textBoxArray[2] && regExpThree.length != 0)
        {
            if(regExpThree.substr(regExpThree.length-1, regExpThree.length) == "]")
            {
                regExpThree = regExpThree.substr(0, regExpThree.length - 1);
                regExpThree = regExpThree.substr(2, regExpThree.length);
                sheepPoints = sheepPoints + 2;
            }
            else if(regExpThree.substr(regExpThree.length-1, regExpThree.length) == "^" || regExpThree.substr(regExpThree.length-1, regExpThree.length) == "$")
            {
                regExpThree = regExpThree.substr(0, regExpThree.length - 1);
                sheepPoints = sheepPoints + 2;
            }
            else
            {
                regExpThree = regExpThree.substr(0, regExpThree.length - 1);
                sheepPoints++;
            }	
        }
    }
}
}
</script>
</body>
</html>
