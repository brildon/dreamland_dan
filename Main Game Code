<canvas id="ctx" width="1600" height="900" style="z-index:2"></canvas>

<script>
/* Author Notes: Make actions re-clickable after being placed
*/

var ctx = document.getElementById("ctx").getContext("2d");

var actionList = ["Jump", "Right", "Left", "Attack", "Duck", "Stand"];
var transitionList = ["Space Bar", "W", "S", "A", "D"];

var canChoseAction = true;
var canChoseTransition = false;

var stateArray = [];

var key = [];
var yCoord = 10;
var xCoord = 10;
var length = 220; 
var width = 50;

var isStand = true;
var isJump = false;
var isMoveLeft = false;
var isMoveRight = false;
var isDucking = false;
var isAttack = false;

var action = [isStand, isJump, isMoveLeft, isMoveRight, isDucking, isAttack];

var spacebarPressed = false;
var wPressed = false;
var aPressed = false;
var sPressed = false;
var dPressed = false;

var transition = [spacebarPressed, wPressed, aPressed, sPressed, dPressed];
var keyNumber = [32, 87, 65, 83, 68];

window.addEventListener("keydown", keyDown, false);
window.addEventListener("keyup", keyUp, false);
window.addEventListener("click", onClickFunction, false);


var change = 500;
var bucket = 10;

//TODO
function stateMachineScreen()
{

}

function game()
{
	update();
	render();
}

//TODO
function update()
{
	//if(key[??])
	{
		
		for(i = 0; i < keyNumber.length; i++)
		{
			//if(?? == keyNumber[i])
			{
				transition[i] = true;
			}
		}
	}
	
	//Same for all other possibilities
	if(transition[0])
	{
		action[0] = false;
	}
	if(!action[0] && transition[0])
	{
		action[1] = true;
	}
	if(!transition[0])
	{
		action[1] = false;
		action[0] = true;
	}
	
	if(transition[1])
	{
		action[2] = false;
	}
	if(!action[2] && transition[1])
	{
		action[3] = true;
	}
	if(!transition[1])
	{
		action[3] = false;
		action[2] = true;
	}
	
	//CODE ABOVE TO BE CONTINUED...
	
	
	
	
	if(isJump)
	{
		
	}
	
	if(isStand)
	{
	
	}
	
	if(isMoveLeft)
	{
	
	}
	
	if(isMoveRight)
	{
	
	}
	
	if(isDucking)
	{
	
	}
	
	if(isAttack)
	{
	
	}
}

//TODO
function render()
{
	//Clickable Actions and Transitions
	ctx.font = "40px algerian"
	for(i = 0; i < actionList.length; i++)
	{
		//boxes
		ctx.fillStyle = 'red';
		ctx.fillRect(xCoord, yCoord, length, width);
		//names
		ctx.fillStyle = 'black';
		ctx.fillText(actionList[i], xCoord, yCoord + width);
		yCoord += 60;
	}	
	for(i = 0; i < transitionList.length; i++)
	{
		//boxes
		ctx.fillStyle = 'blue';
		ctx.fillRect(xCoord, yCoord, length, width);
		//names
		ctx.fillStyle = 'black';
		ctx.fillText(transitionList[i], xCoord, yCoord + width);
		yCoord += 60;
	}
	//This keeps it from going on endlessly because of the amount of times render() is called
	yCoord = 10;
	
	//Empty tree
	xCoord = 240;
	for(i = 0; i < 11; i++)
	{
		ctx.fillStyle = 'green';
		ctx.fillRect(xCoord, yCoord, length, width);
		yCoord += 60;
	}
	yCoord = 10;
	xCoord = 470;
	for(i = 0; i < 11; i++)
	{
		ctx.fillStyle = 'purple';
		ctx.fillRect(xCoord, yCoord, length, width);
		yCoord += 60;
	}
	yCoord = 10;
	xCoord = 700;
	for(i = 0; i < 11; i++)
	{
		ctx.fillStyle = 'green';
		ctx.fillRect(xCoord, yCoord, length, width);
		yCoord += 60;
	}
	yCoord = 10;
	xCoord = 10;
}

//TODO
function setKey()
{
	
}

//TODO
function onClickFunction()
{
	
}

//TODO?
function keyDown(e)
{
		key[e.keyCode] = true;
}

//TODO?
function keyUp(e)
{
		delete key[e.keyCode];
}

//TODO??
//Loop through the ordered Array "finiteArray" and set all actions and transitions in proper place
function finalizeStateMachine(finiteArray)
{
	for(i = 0; i < finiteArray.length; i++)
	{
		if(i % 2 == 0)
		{
			if(i == 0)
			{
				action[i] = finiteArray[i];
			}
			
			action[i - 1] = finiteArray[i]
		}
		else
		{
			transition[i - 1] = finiteArray[i];
		}
	} 
}

//TODO
function startMainGame()
{
	if(stateArray == null)
	{
		stateArray[0] = action[0];
	}
	finalizeStateMachine(stateArray);
}

//TODO??
//Puts actions and Transitions in workable ordered array
function createStateMachine()
{
	var spot = 0;
	var numSpot = 0;
	//if(isStand is clicked)
	{
		stateArray[spot] = action[0];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(isJump is clicked)
	{
		stateArray[spot] = action[1];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(isMoveLeft is clicked)
	{
		stateArray[spot] == action[2];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(isMoveRight is clicked)
	{
		stateArray[spot] = action[3];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(isDucking is clicked)
	{
		stateArray[spot] = action[4];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(isAttack is clicked)
	{
		stateArray[spot] = action[5];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(spacebarPressed is clicked)
	{
		stateArray[spot] = transition[0];
		keyNumber[numSpot] = keyNumber[0];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(wPressed is clicked)
	{
		stateArray[spot] = transition[1];
		keyNumber[numSpot] = keyNumber[1];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(aPressed is clicked)
	{
		stateArray[spot] = transition[2];
		keyNumber[numSpot] = keyNumber[2];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(sPressed is clicked)
	{
		stateArray[spot] = transition[3];
		keyNumber[numSpot] = keyNumber[3];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(dPressed is clicked)
	{
		stateArray[spot] = transition[4];
		keyNumber[numSpot] = keyNumber[4];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
}

setInterval(game, 1000/50);
</script>
