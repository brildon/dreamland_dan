<canvas id="ctx" width="1600" height="900" style="z-index:2"></canvas>

<script>
/* Author Notes: Make actions re-clickable after being placed
*/


loadHandler();
var canvas = document.querySelector("canvas");
var menuCheck = true;
var drawingSurface = canvas.getContext("2d");
var buildCheck = false;

var mouse = {x:0,y:0};

var image = new Image();	
image.addEventListener("load", loadHandler, false);
image.src = "menu.png";


function menu(e)
{
	var tempStartH;
	var tempStartW;
	
	if(e.layerX || e.layerY == 0){
		mouse.x = e.pageX - canvas.offsetLeft;
		mouse.y = e.pageY - canvas.offsetTop;	
	}
	
	if(mouse.x < 930 && mouse.y < 650 && mouse.x > 540 && mouse.y > 440)
	{
		buildCheck=false;
		menuCheck=false;
		loadHandler();
	}
}
function loadHandler()
{

	
	if(menuCheck == true)
	{
		if(buildCheck == false)
		{
			image.src = "menu.png";
			drawingSurface.drawImage(image,0,0,1600,900);
			buildCheck=true;
			
			
		}
		document.onmousedown = menu;
	}
	else
	{
		
		if(buildCheck == false)
		{
			drawingSurface.clearRect(0,0,1600,900);
			buildCheck = true;
		}
	}
}


var ctx = document.getElementById("ctx").getContext("2d");
// Names of actions/transitions
var actionList = ["Jump", "Right", "Left", "Attack", "Duck", "Stand"];
var transitionList = ["Space Bar", "W", "S", "A", "D"];

// objects of actions
var stateCurrent = null;

var stateStandObj = {
	posY: 0,
	posX:  0,
	aproxWidth: 99,
	aproxHeigth: 99,
	radius: 50,
	startAngle: ((Math.PI/180)*0, (Math.PI/180)*360), 
	clicked: false	
}

var stateJumpObj = {
	posY: 0,
	posX:  0,
	aproxWidth: 99,
	aproxHeigth: 99,
	radius: 50,
	startAngle: ((Math.PI/180)*0, (Math.PI/180)*360), 
	clicked: false	
}

var stateLeftObj = {
	posY: 0,
	posX:  0,
	aproxWidth: 99,
	aproxHeigth: 99,
	radius: 50,
	startAngle: ((Math.PI/180)*0, (Math.PI/180)*360), 
	clicked: false	
}

var stateRightObj = {
	posY: 0,
	posX:  0,
	aproxWidth: 99,
	aproxHeigth: 99,
	radius: 50,
	startAngle: ((Math.PI/180)*0, (Math.PI/180)*360), 
	clicked: false	
}

var stateAttackObj = {
	posY: 0,
	posX:  0,
	aproxWidth: 99,
	aproxHeigth: 99,
	radius: 50,
	startAngle: ((Math.PI/180)*0, (Math.PI/180)*360), 
	clicked: false	
}

var stateDuckObj = {
	posY: 0,
	posX:  0,
	aproxWidth: 99,
	aproxHeigth: 99,
	radius: 50,
	startAngle: ((Math.PI/180)*0, (Math.PI/180)*360), 
	clicked: false	
}

var states = [stateJumpObj, stateRightObj, stateLeftObj, stateAttackObj, stateDuckObj, stateStandObj];
// objects of transitions
var spacebarTrans = {x: 10, y: 10};
var wTrans = {x: 10, y: 10};
var aTrans = {x: 10, y: 10};
var sTrans = {x: 10, y:10};
var dTrans = {x: 10, y: 10};
// When you can or can't choose object/transition
var canChoseAction = true;
var canChoseTransition = false;
// Organizer array
var stateArray = [];
// abstract variables for actions or objects
var key = [];
var yCoord = 10;
var xCoord = 10;
var length = 220; 
var width = 50;
// action boolean statements
var isStand = true;
var isJump = false;
var isMoveLeft = false;
var isMoveRight = false;
var isDucking = false;
var isAttack = false;
// action Array
var action = [isStand, isJump, isMoveLeft, isMoveRight, isDucking, isAttack];
// transition boolean statements
var spacebarPressed = false;
var wPressed = false;
var aPressed = false;
var sPressed = false;
var dPressed = false;
// transition and key correspondent arrays
var transition = [spacebarPressed, wPressed, aPressed, sPressed, dPressed];
var keyNumber = [32, 87, 65, 83, 68];
// event listeners for key's and click's
window.addEventListener("keydown", keyDown, false);
window.addEventListener("keyup", keyUp, false);
window.addEventListener("onmousedown", onMouseDownFunction, false);
window.addEventListener("onmousemove", onMouseMoveFunction, false);
window.addEventListener("onmouseup", onMouseUpFunction, false);
// Bucket Variables
var spot = 0;
var numSpot = 0;
var n = 0;
var xCoord = 100;
var yCoord = 100;
var startX = 0;
var startY = 0;

//TODO
function stateMachineScreen()
{
	renderMachineScreen();
	createStateMachine();
}
function gameScreen()
{
	
}
//TODO???
function game()
{
	renderGameScreen();
	update();
}

//TODO
function update()
{
	//SpaceBar
	if(key[32])
	{
		
		for(i = 0; i < keyNumber.length; i++)
		{
			if(32 == keyNumber[i])
			{
				transition[i] = true;
			}
		}
	}
	//W
	if(key[87])
	{
		
		for(i = 0; i < keyNumber.length; i++)
		{
			if(87 == keyNumber[i])
			{
				transition[i] = true;
			}
		}
	}
	//A
	if(key[65])
	{
		
		for(i = 0; i < keyNumber.length; i++)
		{
			if(65 == keyNumber[i])
			{
				transition[i] = true;
			}
		}
	}
	//S
	if(key[83])
	{
		
		for(i = 0; i < keyNumber.length; i++)
		{
			if(83 == keyNumber[i])
			{
				transition[i] = true;
			}
		}
	}
	//D
	if(key[68])
	{
		
		for(i = 0; i < keyNumber.length; i++)
		{
			if(68 == keyNumber[i])
			{
				transition[i] = true;
			}
		}
	}
	
	//Transition corresponding to actions check
	for(i  = 0; i < transition.length; i++)
	{
		if(transition[i])
		{
			action[i + 1*(n)] = false;
		}
		if(!action[i + 1*(n)] && transition[i])
		{
			n += 1;
			action[i + 1*(n)] = true;
		}
		if(!transition[i])
		{
			action[i + 1*(n)] = false;
			action[i + 1*(n - 1)] = true;
		}
	}
	
	// Preform actions
	if(isJump)
	{
		
	}
	
	if(isStand)
	{
	
	}
	
	if(isMoveLeft)
	{
	
	}
	
	if(isMoveRight)
	{
	
	}
	
	if(isDucking)
	{
	
	}
	
	if(isAttack)
	{
	
	}
}

//TODO
// Willian is workin on summin
function renderMachineScreen()
{
	//Clickable Actions and Transitions
	ctx.font = "40px algerian"
	for(i = 0; i < actionList.length; i++)
	{
		//boxes
		ctx.fillStyle = 'red';
		ctx.fillRect(xCoord, yCoord, length, width);
		//names
		ctx.fillStyle = 'black';
		ctx.fillText(actionList[i], xCoord, yCoord + width);
		yCoord += 60;
	}	
	for(i = 0; i < transitionList.length; i++)
	{
		//boxes
		ctx.fillStyle = 'blue';
		ctx.fillRect(xCoord, yCoord, length, width);
		//names
		ctx.fillStyle = 'black';
		ctx.fillText(transitionList[i], xCoord, yCoord + width);
		yCoord += 60;
	}
	//This keeps it from going on endlessly because of the amount of times render() is called
	yCoord = 10;
}
//TODO
function renderGameScreen()
{
	//if(level 1)
	//if(level 2)
	//if(level 3)
	//if(level 4)
	//if(level 5)
}

//TODO
function setKey()
{
	
}

//TODO
function onMouseDownFunction(event)
{
	for (var i= 0; i< states.length; i++)
	{	
		if ( (event.clientY > states[i].posY-42 && event.clientY < (states[i].posY+states[i].aproxHeigth-42)) && (event.clientX > states[i].posX-42 && event.clientX < (states[i].posX+states[i].aproxWidth-42)) )
		{
			states[i].clicked = true;
			stateCurrent = states[i];
			startX = event.clientX - states[i].posX;
			startY = event.clientY - states[i].posY;
		}
	}		
}

function onMouseMoveFunction(event)
{
	if (stateCurrent != null)
	{
		stateCurrent.posX = event.clientX - startX;
    	stateCurrent.posY = event.clientY - startY;
		ctx.clearRect(0,0,800,800);
		
		ctx.font = "25px arial"
		for(i = 0; i < actionList.length; i++)
		{
			//circles
			ctx.beginPath();
			ctx.arc(states[i].posX, states[i].posY, states[i].radius, states[i].startAngle , false);
			ctx.stroke();
			ctx.closePath();
		
			//names
			ctx.fillStyle = 'black';
			ctx.fillText(actionList[i], states[i].posX-35, states[i].posY);
		}	
	}
}

function onMouseUpFunction(event)
{
	stateCurrent = null;	
	for (var i = 0; i < actionList.length; i++)
	{
		states[i].clicked = false;	
	}
}

//TODO?
function keyDown(e)
{
		key[e.keyCode] = true;
}

//TODO?
function keyUp(e)
{
		delete key[e.keyCode];
}

//TODO??
//Loop through the ordered Array "finiteArray" and set all actions and transitions in proper place
function finalizeStateMachine(finiteArray)
{
	for(i = 0; i < finiteArray.length; i++)
	{
		if(i % 2 == 0)
		{
			if(i == 0)
			{
				action[i] = finiteArray[i];
			}
			
			action[i - 1] = finiteArray[i];
		}
		else
		{
			transition[i - 1] = finiteArray[i];
		}
	} 
}

//TODO
function startMainGame()
{
	if(stateArray == null)
	{
		stateArray[0] = action[0];
	}
	finalizeStateMachine(stateArray);
}

//TODO??
//Puts actions and Transitions in workable ordered array
function createStateMachine()
{
	if(stateStandObj.clicked && canChoseAction)
	{
		stateArray[spot] = action[0];
		spot++;
		canChoseAction = false;
		canChoseTransition = true;
	}
	if(stateJumpObj.clicked && canChoseAction)
	{
		stateArray[spot] = action[1];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	if(stateLeftObj.clicked && canChoseAction)
	{
		stateArray[spot] == action[2];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	if(stateRightObj.clicked && canChoseAction)
	{
		stateArray[spot] = action[3];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	if(stateDuckObj.clicked && canChoseAction)
	{
		stateArray[spot] = action[4];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	if(stateAttackObj.clicked && canChoseAction)
	{
		stateArray[spot] = action[5];
		spot++;
		canChoseAction  = false;
		canChoseTransition = true;
	}
	//if(spacebarPressed is clicked)
	{
		stateArray[spot] = transition[0];
		keyNumber[numSpot] = keyNumber[0];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(wPressed is clicked)
	{
		stateArray[spot] = transition[1];
		keyNumber[numSpot] = keyNumber[1];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(aPressed is clicked)
	{
		stateArray[spot] = transition[2];
		keyNumber[numSpot] = keyNumber[2];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(sPressed is clicked)
	{
		stateArray[spot] = transition[3];
		keyNumber[numSpot] = keyNumber[3];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
	//if(dPressed is clicked)
	{
		stateArray[spot] = transition[4];
		keyNumber[numSpot] = keyNumber[4];
		numSpot++;
		spot++;
		canChoseAction  = true;
		canChoseTransition = false;
	}
}
function createInitialMachine()
{
	//Clickable Actions and Transitions
	ctx.font = "25px arial"
	for(i = 0; i < actionList.length; i++)
	{
		states[i].posX = xCoord;
		states[i].posY = yCoord;
		//circles
		ctx.beginPath();
		ctx.arc(states[i].posX, states[i].posY, states[i].radius, states[i].startAngle , false);
		ctx.stroke();
		ctx.closePath();
		//names
		ctx.fillStyle = 'black';
		ctx.fillText(actionList[i], states[i].posX-35, states[i].posY);
		yCoord += 110;
	}
	yCoord = 100;
	xCoord = 100;
}
if(buildCheck)
{
	createInitialMachine();
	setInterval(stateMachineScreen, 1000/50);
}

</script>
