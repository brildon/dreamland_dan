<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>DreamLand Dan</title>
</head>
<body>
<canvas id="ctx" width="1584" height="884" style="z-index:2"></canvas>
<script>
var cv = document.getElementById("ctx");
var ctx = cv.getContext('2d');

var menuCheck = true;
var buildCheck = false;
var collide = false;
var falling = false;
var isDucked = false;
var isStanding = true;
var mouse = {x:0,y:0};

var key = [];

var gameWorld = {
	x: 0,
	y: 0,
	width: 6370,
	heigth: 884	
}

var camera = {
	x: 0,
	y: 0,
	width: cv.width,
	height: cv.height,
	
	rightInnerBoundary: function (){
		return this.x + (this.width * 0.75);	
	},	
	leftInnerBoundary: function (){
		return this.x+ (this.width * 0.25);	
	},
	topInnerBoundary: function (){
		return this.y + (this.height * 0.25);	
	},
	bottomInnerBoundary: function (){
		return this.y + (this.height * 0.75);	
	}
}

var collisionObj = {
	x: 0,
	y: 0,
	height: 10,
	width: 75,
	
	centerX: function (){
		return this.x + (this.width / 2);
	},
	centerY: function (){
		return this.y + (this.height / 2);	
	},
	halfWidth: function(){
		return (this.width / 2);	
	},
	halfHeight: function(){
		return (this.height / 2);	
	}	
	
}

var playerObj = {
	posY: 600,
	posX: 600,
	height: 138,
	width: 124,
	hMask: 10,
	wMask: 75,
	jumpStrength: 20,
	jumpDecay: 0.5,
	speed: 5,
	
	centerX: function (){
		return this.posX + (this.wMask / 2);
	},
	centerY: function (){
		return this.posY + (this.height / 2);	
	},
	halfWidth: function(){
		return (this.wMask / 2);	
	},
	halfHeight: function(){
		return (this.height / 2);	
	}
}

var worldFloor = {
	posX: 0,
	posY: 0,
	height: 10,
	width: gameWorld.width,
	hMask: 0,
	wMask: 0,
	
	centerX: function (){
		return this.posX + (this.width / 2);
	},
	centerY: function (){
		return this.posY + (this.height / 2);	
	},
	halfWidth: function(){
		return (this.width / 2);	
	},
	halfHeight: function(){
		return (this.height / 2);	
	}
}

var branchObj = {
	posX: 0,
	posY: 0,
	height: 10,
	width : 100,
	
	centerX: function (){
		return this.posX + (this.width / 2);
	},
	centerY: function (){
		return this.posY + (this.height / 2);	
	},
	halfWidth: function(){
		return (this.width / 2);	
	},
	halfHeight: function(){
		return (this.height / 2);	
	}		
}

var playerObj = Object.create(playerObj);

var aBranch = new Array (3);
for (var i=0;i<aBranch.length;i++){
	aBranch[i] = Object.create(branchObj);	
}

aBranch[0].posX = 150;
aBranch[0].posY = 580;

aBranch[1].posX = 300;
aBranch[1].posY = 400;
	
aBranch[2].posX = 2450;
aBranch[2].posY = 580;

var worldFloor = Object.create(worldFloor);
worldFloor.posX = 0;
worldFloor.posY = 734;

var hitVar = false;
var floorLvl = 600;
var box1 = new breakObj(800, 600, 50, 50, false);
var box2 = new breakObj(900, 600, 50, 50, false);

camera.x = (gameWorld.x + gameWorld.width/2) - camera.width/2;
camera.y = (gameWorld.y + gameWorld.height/2) - camera.height/2;

var isAttack = false;
var isDucking = false;
var isMoveLeft = false;
var isMoveRight = false;
var isJump = false;

// event listeners for key's and click's
window.addEventListener("keydown", keyDown, false);
window.addEventListener("keyup", keyUp, false);

//loadHandler();
var image = new Image();	
image.addEventListener("load", loadHandler, false);
image.src = "https://cloud.githubusercontent.com/assets/8864180/4445341/959aebc2-47f8-11e4-847c-787805f7d18a.png";

var background = new Image();	
background.addEventListener("load", loadHandler, false);
background.src = "https://cloud.githubusercontent.com/assets/8835208/4622647/808596b8-533f-11e4-8e1d-661d39b4d09b.png";

var llama_left = new Image();	
var llama_right = new Image();
llama_left.src = "https://cloud.githubusercontent.com/assets/8864180/4586896/82814c90-5020-11e4-992b-ad73f2ed03be.png";
llama_right.src = "https://cloud.githubusercontent.com/assets/8864180/4586897/8285871a-5020-11e4-94fd-a55f2a82e864.png";

function menu(e)
{
	var tempStartH;
	var tempStartW;
	
	if(e.layerX || e.layerY == 0){
		mouse.x = e.pageX - cv.offsetLeft;
		mouse.y = e.pageY - cv.offsetTop;	
	}
	
	if(mouse.x < 930 && mouse.y < 650 && mouse.x > 540 && mouse.y > 440 && menuCheck==true)
	{
		buildCheck=false;
		menuCheck=false;
		loadHandler();
	}
}

function loadHandler()
{	
	if(menuCheck == true)
	{
		if(buildCheck == false)
		{
			ctx.drawImage(image,0,0,1600,900);
			buildCheck=true;		
		}
		document.onmousedown = menu;
	}
	else
	{	
		if(buildCheck == false)
		{
			buildCheck = true;
			setInterval(gameScreen, 1000/50);
		}
	}
}

function gameScreen()
{
	update();
	
	side_scroller();
	
	render();
}

function side_scroller(){
	playerObj.posX = Math.max(0, Math.min(playerObj.posX, gameWorld.width - playerObj.width));
		
	camera.x = Math.floor(playerObj.posX + (playerObj.width/2) - (camera.width/2));
	camera.y = Math.floor(playerObj.posY + (playerObj.height/2) - (camera.height/2));
	
	if (playerObj.posX < camera.leftInnerBoundary()){
		camera.x = Math.floor(playerObj.posX - (camera.width * 0.25));	
	}
	if (playerObj.posY < camera.topInnerBoundary()){
		camera.y = Math.floor(playerObj.posY - (camera.height*0.25));	
	}
	if (playerObj.posX + playerObj.width > camera.rightInnerBoundary()){
		camera.x = Math.floor(playerObj.posX + playerObj.width - (camera.width *0.75));	
	}
	if (playerObj.posY + playerObj.height > camera.bottomInnerBoundary()){
		camera.y = Math.floor(playerObj.posY + playerObj.height - (camera.height * 0.75));
	}
	
	if (camera.x < gameWorld.x){
		camera.x = gameWorld.x;	
	}
	if (camera.y < gameWorld.y){
		camera.y = gameWorld.y;	
	}
	if (camera.x + camera.width > gameWorld.x + gameWorld.width){
		camera.x = gameWorld.x + gameWorld.width - camera.width;	
	}
	if (camera.y + camera.height > gameWorld.heigth){
		camera.y = gameWorld.heigth - camera.height;	
	}	
}

function update()
{
	var playerDirec = 0;
	collisionObj.x = playerObj.posX;
	collisionObj.y = playerObj.posY + playerObj.height - collisionObj.height;
	
	//SpaceBar
	if(key[32])
	{
		isAttack = true;
	}
	//W
	if(key[87])
	{
		if(!isJump)
		{
			playerObj.posY = floorLvl-1;
			isJump = true;
		}	
	}
	//A
	if(key[65])
	{
		isMoveLeft = true;
	}
	//S
	if(key[83])
	{
		isDucking = true;
	}
	//D
	if(key[68])
	{
		isMoveRight = true;
	}
	
	//SpaceBar
	if(!key[32])
	{
		isAttack = false;
	}
	//W
	
	//A 
	if(!key[65])
	{
		isMoveLeft = false;
	}
	//S
	if(!key[83])
	{
		isDucking = false;
	}
	//D
	if(!key[68])
	{
		isMoveRight = false;
	}
	
	// Preform actions
	if(isJump)
	{
			if(playerObj.posY > floorLvl) //quando passa do nivel do chao
			{
				playerObj.jumpDecay = .5;
				playerObj.jumpStrength = 20;
				playerObj.posY = floorLvl;
				playerDirec = 0;
				isJump = false;
				falling = true;
			}
			//Gravity equation...
			else if(playerObj.posY != floorLvl)
			{
				playerDirec = playerObj.jumpStrength - playerObj.jumpDecay
				collide = false;
				if (playerDirec < 0 ){ //caindo
					for (var i = 0; i< aBranch.length; i++){
						if (hitTest(collisionObj,aBranch[i])){
								floorLvl = playerObj.posY;	
								collide = true;	
								falling = false;
						}
					}
				}

				// constantly updates playerOne's Y position
				playerObj.posY -= playerDirec;
				// constantly increases the amount of pull downwards by one. 
				playerObj.jumpDecay += 1;
			}
	}
	
	collide=false;
	for (var i = 0; i< aBranch.length; i++){
		if (hitTest(collisionObj,aBranch[i])){
				collide = true;	
				falling = false;
		}
	}
	
	if (!collide&&!isJump){
		floorLvl=600;
		if (playerObj.posY<floorLvl)
		{
			if(!falling)
			{
				falling = true;
				fallStrength = 0;
			}
			else
			{
				playerObj.posY+=fallStrength;
				fallStrength++;
			}
		}
		else
			falling = false;
	}
	
	
	if(isMoveLeft)
	{
		playerObj.posX -= playerObj.speed;	
	}
	
	if(isMoveRight)
	{
		playerObj.posX += playerObj.speed;
	}
	
	if(isDucking)
	{
		isStanding = false;
		if (isDucked == false)
		{
			isDucked = true;	
			playerObj.height = 138/2;
			playerObj.posY = playerObj.posY + 69;
		}
	}
	if(!isDucking)
	{
		isDucked = false;
		if(isStanding == false)
		{
			isStanding = true;
			playerObj.height = 138;	
			playerObj.posY = playerObj.posY - 69;
		}
	}
	
	if(isAttack)
	{
		if(box1.posX <= (playerObj.posX + playerObj.width) && playerObj.posY == box1.posY && box1.posX >= playerObj.posX)
		{
			box1.broken = true;
		}
		if(box2.posX <= (playerObj.posX + playerObj.width) && playerObj.posY == box2.posY && box2.posX >= playerObj.posX)
		{
			box2.broken = true;
		}
	}
	render();
	
}

function hitTest(r1,r2){
	//console.log("testando");
	return Math.abs(r1.centerX() - r2.centerX()) < r1.halfWidth() + r2.halfWidth() && Math.abs(r1.centerY() - r2.centerY()) < r1.halfHeight()+r2.halfHeight();	
}

function render()
{
	
	ctx.clearRect(0,0,1600,900);
	
	ctx.save();
	ctx.translate(-camera.x, -camera.y);
	ctx.drawImage(background,0,0,6370,900);
	
	ctx.fillRect(playerObj.posX, playerObj.posY+124, playerObj.wMask, playerObj.hMask);
	
	if(!box1.broken)
	{
		ctx.fillRect(box1.posX, box1.posY, box1.width, box1.height);
	}
	if(!box2.broken)
	{
		ctx.fillRect(box2.posX, box2.posY, box2.width, box2.height);
	}
	
	if(!isMoveLeft){
		ctx.drawImage(llama_right,playerObj.posX, playerObj.posY);
	}
	if(isMoveLeft){
			ctx.drawImage(llama_left,playerObj.posX-49, playerObj.posY);
	}
		
	for (var i=0;i<aBranch.length;i++){
		ctx.fillRect(aBranch[i].posX,aBranch[i].posY,aBranch[i].width,aBranch[i].height);	
	}
	
	if(isAttack)
	{
		ctx.fillStyle = 'green';
		ctx.fillRect(playerObj.posX + playerObj.width, playerObj.posY, playerObj.width/2, playerObj.height/4);
	}
	
	ctx.fillRect(worldFloor.posX,worldFloor.posY,worldFloor.width,worldFloor.height);
	
	ctx.restore();
}

function keyDown(e)
{
		key[e.keyCode] = true;
}

function keyUp(e)
{
		delete key[e.keyCode];
}

function breakObj(posX, posY, height, width, broken)
{
	this.posX = posX;
	this.posY = posY;
	this.height = height;
	this.width = width;
	this.broken = broken;
}
</script>
</body>
</html>
